{"version":3,"sources":["../src/common/common.ts","../../../node_modules/.pnpm/ethers@6.7.1/node_modules/ethers/src.ts/_version.ts","../../../node_modules/.pnpm/ethers@6.7.1/node_modules/ethers/src.ts/utils/properties.ts","../../../node_modules/.pnpm/ethers@6.7.1/node_modules/ethers/src.ts/utils/errors.ts","../../../node_modules/.pnpm/ethers@6.7.1/node_modules/ethers/src.ts/utils/data.ts","../../../node_modules/.pnpm/ethers@6.7.1/node_modules/ethers/src.ts/crypto/crypto.ts","../../../node_modules/.pnpm/ethers@6.7.1/node_modules/ethers/src.ts/crypto/sha2.ts","../src/common/cryptography.ts","../src/binary/types/node.ts","../src/binary/binaryMerkleTree.ts","../src/sparse/treeHasher.ts","../src/sparse/types/sparseCompactMerkleProof.ts","../src/sparse/types/sparseMerkleProof.ts","../src/sparse/utils.ts","../src/sparse/proofs.ts","../src/sparse/sparseMerkleTree.ts"],"sourcesContent":["/// @dev The Fuel testing Merkle trees.\n/// A set of useful helper methods for testing and deploying Merkle trees.\n\nexport const EMPTY = '0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';\nexport const ZERO = '0x0000000000000000000000000000000000000000000000000000000000000000';\nexport const MAX_HEIGHT = 256;\n","/* Do NOT modify this file; see /src.ts/_admin/update-version.ts */\n\n/**\n *  The current version of Ethers.\n */\nexport const version: string = \"6.7.1\";\n","/**\n *  Property helper functions.\n *\n *  @_subsection api/utils:Properties  [about-properties]\n */\n\nfunction checkType(value: any, type: string, name: string): void {\n    const types = type.split(\"|\").map(t => t.trim());\n    for (let i = 0; i < types.length; i++) {\n        switch (type) {\n            case \"any\":\n                return;\n            case \"bigint\":\n            case \"boolean\":\n            case \"number\":\n            case \"string\":\n                if (typeof(value) === type) { return; }\n        }\n    }\n\n    const error: any = new Error(`invalid value for type ${ type }`);\n    error.code = \"INVALID_ARGUMENT\";\n    error.argument = `value.${ name }`;\n    error.value = value;\n\n    throw error;\n}\n\n/**\n *  Resolves to a new object that is a copy of %%value%%, but with all\n *  values resolved.\n */\nexport async function resolveProperties<T>(value: { [ P in keyof T ]: T[P] | Promise<T[P]>}): Promise<T> {\n    const keys = Object.keys(value);\n    const results = await Promise.all(keys.map((k) => Promise.resolve(value[<keyof T>k])));\n    return results.reduce((accum: any, v, index) => {\n        accum[keys[index]] = v;\n        return accum;\n    }, <{ [ P in keyof T]: T[P] }>{ });\n}\n\n/**\n *  Assigns the %%values%% to %%target%% as read-only values.\n *\n *  It %%types%% is specified, the values are checked.\n */\nexport function defineProperties<T>(\n target: T,\n values: { [ K in keyof T ]?: T[K] },\n types?: { [ K in keyof T ]?: string }): void {\n\n    for (let key in values) {\n        let value = values[key];\n\n        const type = (types ? types[key]: null);\n        if (type) { checkType(value, type, key); }\n\n        Object.defineProperty(target, key, { enumerable: true, value, writable: false });\n    }\n}\n","/**\n *  All errors in ethers include properties to ensure they are both\n *  human-readable (i.e. ``.message``) and machine-readable (i.e. ``.code``).\n *\n *  The [[isError]] function can be used to check the error ``code`` and\n *  provide a type guard for the properties present on that error interface.\n *\n *  @_section: api/utils/errors:Errors  [about-errors]\n */\n\nimport { version } from \"../_version.js\";\n\nimport { defineProperties } from \"./properties.js\";\n\nimport type {\n    TransactionRequest, TransactionReceipt, TransactionResponse\n} from \"../providers/index.js\";\n\nimport type { FetchRequest, FetchResponse } from \"./fetch.js\";\n\n/**\n *  An error may contain additional properties, but those must not\n *  conflict with any impliciat properties.\n */\nexport type ErrorInfo<T> = Omit<T, \"code\" | \"name\" | \"message\">;\n\n\nfunction stringify(value: any): any {\n    if (value == null) { return \"null\"; }\n\n    if (Array.isArray(value)) {\n        return \"[ \" + (value.map(stringify)).join(\", \") + \" ]\";\n    }\n\n    if (value instanceof Uint8Array) {\n        const HEX = \"0123456789abcdef\";\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            result += HEX[value[i] >> 4];\n            result += HEX[value[i] & 0xf];\n        }\n        return result;\n    }\n\n    if (typeof(value) === \"object\" && typeof(value.toJSON) === \"function\") {\n        return stringify(value.toJSON());\n    }\n\n    switch (typeof(value)) {\n        case \"boolean\": case \"symbol\":\n            return value.toString();\n        case \"bigint\":\n            return BigInt(value).toString();\n        case \"number\":\n            return (value).toString();\n        case \"string\":\n            return JSON.stringify(value);\n        case \"object\": {\n            const keys = Object.keys(value);\n            keys.sort();\n            return \"{ \" + keys.map((k) => `${ stringify(k) }: ${ stringify(value[k]) }`).join(\", \") + \" }\";\n        }\n    }\n\n    return `[ COULD NOT SERIALIZE ]`;\n}\n\n/**\n *  All errors emitted by ethers have an **ErrorCode** to help\n *  identify and coalesce errors to simplfy programatic analysis.\n *\n *  Each **ErrorCode** is the %%code%% proerty of a coresponding\n *  [[EthersError]].\n *\n *  **Generic Errors**\n *\n *  **``\"UNKNOWN_ERROR\"``** - see [[UnknownError]]\n *\n *  **``\"NOT_IMPLEMENTED\"``** - see [[NotImplementedError]]\n *\n *  **``\"UNSUPPORTED_OPERATION\"``** - see [[UnsupportedOperationError]]\n *\n *  **``\"NETWORK_ERROR\"``** - see [[NetworkError]]\n *\n *  **``\"SERVER_ERROR\"``** - see [[ServerError]]\n *\n *  **``\"TIMEOUT\"``** - see [[TimeoutError]]\n *\n *  **``\"BAD_DATA\"``** - see [[BadDataError]]\n *\n *  **``\"CANCELLED\"``** - see [[CancelledError]]\n *\n *  **Operational Errors**\n *\n *  **``\"BUFFER_OVERRUN\"``** - see [[BufferOverrunError]]\n *\n *  **``\"NUMERIC_FAULT\"``** - see [[NumericFaultError]]\n *\n *  **Argument Errors**\n *\n *  **``\"INVALID_ARGUMENT\"``** - see [[InvalidArgumentError]]\n *\n *  **``\"MISSING_ARGUMENT\"``** - see [[MissingArgumentError]]\n *\n *  **``\"UNEXPECTED_ARGUMENT\"``** - see [[UnexpectedArgumentError]]\n *\n *  **``\"VALUE_MISMATCH\"``** - //unused//\n *\n *  **Blockchain Errors**\n *\n *  **``\"CALL_EXCEPTION\"``** - see [[CallExceptionError]]\n *\n *  **``\"INSUFFICIENT_FUNDS\"``** - see [[InsufficientFundsError]]\n *\n *  **``\"NONCE_EXPIRED\"``** - see [[NonceExpiredError]]\n *\n *  **``\"REPLACEMENT_UNDERPRICED\"``** - see [[ReplacementUnderpricedError]]\n *\n *  **``\"TRANSACTION_REPLACED\"``** - see [[TransactionReplacedError]]\n *\n *  **``\"UNCONFIGURED_NAME\"``** - see [[UnconfiguredNameError]]\n *\n *  **``\"OFFCHAIN_FAULT\"``** - see [[OffchainFaultError]]\n *\n *  **User Interaction Errors**\n *\n *  **``\"ACTION_REJECTED\"``** - see [[ActionRejectedError]]\n */\nexport type ErrorCode =\n\n    // Generic Errors\n    \"UNKNOWN_ERROR\" | \"NOT_IMPLEMENTED\" | \"UNSUPPORTED_OPERATION\" |\n    \"NETWORK_ERROR\" | \"SERVER_ERROR\" | \"TIMEOUT\" | \"BAD_DATA\" |\n    \"CANCELLED\" |\n\n    // Operational Errors\n    \"BUFFER_OVERRUN\" |  \"NUMERIC_FAULT\" |\n\n    // Argument Errors\n    \"INVALID_ARGUMENT\" | \"MISSING_ARGUMENT\" | \"UNEXPECTED_ARGUMENT\" |\n    \"VALUE_MISMATCH\" |\n\n    // Blockchain Errors\n    \"CALL_EXCEPTION\" | \"INSUFFICIENT_FUNDS\" | \"NONCE_EXPIRED\" |\n    \"REPLACEMENT_UNDERPRICED\" | \"TRANSACTION_REPLACED\" |\n    \"UNCONFIGURED_NAME\" | \"OFFCHAIN_FAULT\" |\n\n    // User Interaction\n    \"ACTION_REJECTED\"\n;\n\n/**\n *  All errors in Ethers include properties to assist in\n *  machine-readable errors.\n */\nexport interface EthersError<T extends ErrorCode = ErrorCode> extends Error {\n    /**\n     *  The string error code.\n     */\n    code: ErrorCode;\n\n    /**\n     *  Additional info regarding the error that may be useful.\n     *\n     *  This is generally helpful mostly for human-based debugging.\n     */\n    info?: Record<string, any>;\n\n    /**\n     *  Any related error.\n     */\n    error?: Error;\n}\n\n// Generic Errors\n\n/**\n *  This Error is a catch-all for when there is no way for Ethers to\n *  know what the underlying problem is.\n */\nexport interface UnknownError extends EthersError<\"UNKNOWN_ERROR\"> {\n    [ key: string ]: any;\n}\n\n/**\n *  This Error is mostly used as a stub for functionality that is\n *  intended for the future, but is currently not implemented.\n */\nexport interface NotImplementedError extends EthersError<\"NOT_IMPLEMENTED\"> {\n    /**\n     *  The attempted operation.\n     */\n    operation: string;\n}\n\n/**\n *  This Error indicates that the attempted operation is not supported.\n *\n *  This could range from a specifc JSON-RPC end-point not supporting\n *  a feature to a specific configuration of an object prohibiting the\n *  operation.\n *\n *  For example, a [[Wallet]] with no connected [[Provider]] is unable\n *  to send a transaction.\n */\nexport interface UnsupportedOperationError extends EthersError<\"UNSUPPORTED_OPERATION\"> {\n    /**\n     *  The attempted operation.\n     */\n    operation: string;\n}\n\n/**\n *  This Error indicates a proplem connecting to a network.\n */\nexport interface NetworkError extends EthersError<\"NETWORK_ERROR\"> {\n    /**\n     *  The network event.\n     */\n    event: string;\n}\n\n/**\n *  This Error indicates there was a problem fetching a resource from\n *  a server.\n */\nexport interface ServerError extends EthersError<\"SERVER_ERROR\"> {\n    /**\n     *  The requested resource.\n     */\n    request: FetchRequest | string;\n\n    /**\n     *  The response received from the server, if available.\n     */\n    response?: FetchResponse;\n}\n\n/**\n *  This Error indicates that the timeout duration has expired and\n *  that the operation has been implicitly cancelled.\n *\n *  The side-effect of the operation may still occur, as this\n *  generally means a request has been sent and there has simply\n *  been no response to indicate whether it was processed or not.\n */\nexport interface TimeoutError extends EthersError<\"TIMEOUT\"> {\n    /**\n     *  The attempted operation.\n     */\n    operation: string;\n\n    /**\n     *  The reason.\n     */\n    reason: string;\n\n    /**\n     *  The resource request, if available.\n     */\n    request?: FetchRequest;\n}\n\n/**\n *  This Error indicates that a provided set of data cannot\n *  be correctly interpretted.\n */\nexport interface BadDataError extends EthersError<\"BAD_DATA\"> {\n    /**\n     *  The data.\n     */\n    value: any;\n}\n\n/**\n *  This Error indicates that the operation was cancelled by a\n *  programmatic call, for example to ``cancel()``.\n */\nexport interface CancelledError extends EthersError<\"CANCELLED\"> {\n}\n\n\n// Operational Errors\n\n/**\n *  This Error indicates an attempt was made to read outside the bounds\n *  of protected data.\n *\n *  Most operations in Ethers are protected by bounds checks, to mitigate\n *  exploits when parsing data.\n */\nexport interface BufferOverrunError extends EthersError<\"BUFFER_OVERRUN\"> {\n    /**\n     *  The buffer that was overrun.\n     */\n    buffer: Uint8Array;\n\n    /**\n     *  The length of the buffer.\n     */\n    length: number;\n\n    /**\n     *  The offset that was requested.\n     */\n    offset: number;\n}\n\n/**\n *  This Error indicates an operation which would result in incorrect\n *  arithmetic output has occurred.\n *\n *  For example, trying to divide by zero or using a ``uint8`` to store\n *  a negative value.\n */\nexport interface NumericFaultError extends EthersError<\"NUMERIC_FAULT\"> {\n    /**\n     *  The attempted operation.\n     */\n    operation: string;\n\n    /**\n     *  The fault reported.\n     */\n    fault: string;\n\n    /**\n     *  The value the operation was attempted against.\n     */\n    value: any;\n}\n\n\n// Argument Errors\n\n/**\n *  This Error indicates an incorrect type or value was passed to\n *  a function or method.\n */\nexport interface InvalidArgumentError extends EthersError<\"INVALID_ARGUMENT\"> {\n    /**\n     *  The name of the argument.\n     */\n    argument: string;\n\n    /**\n     *  The value that was provided.\n     */\n    value: any;\n\n    info?: Record<string, any>\n}\n\n/**\n *  This Error indicates there were too few arguments were provided.\n */\nexport interface MissingArgumentError extends EthersError<\"MISSING_ARGUMENT\"> {\n    /**\n     *  The number of arguments received.\n     */\n    count: number;\n\n    /**\n     *  The number of arguments expected.\n     */\n    expectedCount: number;\n}\n\n/**\n *  This Error indicates too many arguments were provided.\n */\nexport interface UnexpectedArgumentError extends EthersError<\"UNEXPECTED_ARGUMENT\"> {\n    /**\n     *  The number of arguments received.\n     */\n    count: number;\n\n    /**\n     *  The number of arguments expected.\n     */\n    expectedCount: number;\n}\n\n\n// Blockchain Errors\n\n/**\n *  The action that resulted in the call exception.\n */\nexport type CallExceptionAction = \"call\" | \"estimateGas\" | \"getTransactionResult\" | \"sendTransaction\" | \"unknown\";\n\n/**\n *  The related transaction that caused the error.\n */\nexport type CallExceptionTransaction = {\n    to: null | string;\n    from?: string;\n    data: string;\n};\n\n/**\n *  This **Error** indicates a transaction reverted.\n */\nexport interface CallExceptionError extends EthersError<\"CALL_EXCEPTION\"> {\n\n    /**\n     *  The action being performed when the revert was encountered.\n     */\n    action: CallExceptionAction;\n\n    /**\n     *  The revert data returned.\n     */\n    data: null | string;\n\n    /**\n     *  A human-readable representation of data, if possible.\n     */\n    reason: null | string;\n\n    /**\n     *  The transaction that triggered the exception.\n     */\n    transaction: CallExceptionTransaction,\n\n    /**\n     *  The contract invocation details, if available.\n     */\n    invocation: null | {\n        method: string;\n        signature: string;\n        args: Array<any>;\n    }\n\n    /**\n     *  The built-in or custom revert error, if available\n     */\n    revert: null | {\n        signature: string;\n        name: string;\n        args: Array<any>;\n    }\n\n    /**\n     *  If the error occurred in a transaction that was mined\n     *  (with a status of ``0``), this is the receipt.\n     */\n    receipt?: TransactionReceipt;   // @TODO: in v7, make this `null | TransactionReceipt`\n}\n\n\n/**\n *  The sending account has insufficient funds to cover the\n *  entire transaction cost.\n */\nexport interface InsufficientFundsError extends EthersError<\"INSUFFICIENT_FUNDS\"> {\n    /**\n     *  The transaction.\n     */\n    transaction: TransactionRequest;\n}\n\n/**\n *  The sending account has already used this nonce in a\n *  transaction that has been included.\n */\nexport interface NonceExpiredError extends EthersError<\"NONCE_EXPIRED\"> {\n    /**\n     *  The transaction.\n     */\n    transaction: TransactionRequest;\n}\n\n/**\n *  A CCIP-read exception, which cannot be recovered from or\n *  be further processed.\n */\nexport interface OffchainFaultError extends EthersError<\"OFFCHAIN_FAULT\"> {\n    /**\n     *  The transaction.\n     */\n    transaction?: TransactionRequest;\n\n    /**\n     *  The reason the CCIP-read failed.\n     */\n    reason: string;\n}\n\n/**\n *  An attempt was made to replace a transaction, but with an\n *  insufficient additional fee to afford evicting the old\n *  transaction from the memory pool.\n */\nexport interface ReplacementUnderpricedError extends EthersError<\"REPLACEMENT_UNDERPRICED\"> {\n    /**\n     *  The transaction.\n     */\n    transaction: TransactionRequest;\n}\n\n/**\n *  A pending transaction was replaced by another.\n */\nexport interface TransactionReplacedError extends EthersError<\"TRANSACTION_REPLACED\"> {\n    /**\n     *  If the transaction was cancelled, such that the original\n     *  effects of the transaction cannot be assured.\n     */\n    cancelled: boolean;\n\n    /**\n     *  The reason the transaction was replaced.\n     */\n    reason: \"repriced\" | \"cancelled\" | \"replaced\";\n\n    /**\n     *  The hash of the replaced transaction.\n     */\n    hash: string;\n\n    /**\n     *  The transaction that replaced the transaction.\n     */\n    replacement: TransactionResponse;\n\n    /**\n     *  The receipt of the transaction that replace the transaction.\n     */\n    receipt: TransactionReceipt;\n}\n\n/**\n *  This Error indicates an ENS name was used, but the name has not\n *  been configured.\n *\n *  This could indicate an ENS name is unowned or that the current\n *  address being pointed to is the [[ZeroAddress]].\n */\nexport interface UnconfiguredNameError extends EthersError<\"UNCONFIGURED_NAME\"> {\n    /**\n     *  The ENS name that was requested\n     */\n    value: string;\n}\n\n/**\n *  This Error indicates a request was rejected by the user.\n *\n *  In most clients (such as MetaMask), when an operation requires user\n *  authorization (such as ``signer.sendTransaction``), the client\n *  presents a dialog box to the user. If the user denies the request\n *  this error is thrown.\n */\nexport interface ActionRejectedError extends EthersError<\"ACTION_REJECTED\"> {\n    /**\n     *  The requested action.\n     */\n    action: \"requestAccess\" | \"sendTransaction\" | \"signMessage\" | \"signTransaction\" | \"signTypedData\" | \"unknown\",\n\n    /**\n     *  The reason the action was rejected.\n     *\n     *  If there is already a pending request, some clients may indicate\n     *  there is already a ``\"pending\"`` action. This prevents an app\n     *  from spamming the user.\n     */\n    reason: \"expired\" | \"rejected\" | \"pending\"\n}\n\n// Coding; converts an ErrorCode its Typed Error\n\n/**\n *  A conditional type that transforms the [[ErrorCode]] T into\n *  its EthersError type.\n *\n *  @flatworm-skip-docs\n */\nexport type CodedEthersError<T> =\n    T extends \"UNKNOWN_ERROR\" ? UnknownError:\n    T extends \"NOT_IMPLEMENTED\" ? NotImplementedError:\n    T extends \"UNSUPPORTED_OPERATION\" ? UnsupportedOperationError:\n    T extends \"NETWORK_ERROR\" ? NetworkError:\n    T extends \"SERVER_ERROR\" ? ServerError:\n    T extends \"TIMEOUT\" ? TimeoutError:\n    T extends \"BAD_DATA\" ? BadDataError:\n    T extends \"CANCELLED\" ? CancelledError:\n\n    T extends \"BUFFER_OVERRUN\" ? BufferOverrunError:\n    T extends \"NUMERIC_FAULT\" ? NumericFaultError:\n\n    T extends \"INVALID_ARGUMENT\" ? InvalidArgumentError:\n    T extends \"MISSING_ARGUMENT\" ? MissingArgumentError:\n    T extends \"UNEXPECTED_ARGUMENT\" ? UnexpectedArgumentError:\n\n    T extends \"CALL_EXCEPTION\" ? CallExceptionError:\n    T extends \"INSUFFICIENT_FUNDS\" ? InsufficientFundsError:\n    T extends \"NONCE_EXPIRED\" ? NonceExpiredError:\n    T extends \"OFFCHAIN_FAULT\" ? OffchainFaultError:\n    T extends \"REPLACEMENT_UNDERPRICED\" ? ReplacementUnderpricedError:\n    T extends \"TRANSACTION_REPLACED\" ? TransactionReplacedError:\n    T extends \"UNCONFIGURED_NAME\" ? UnconfiguredNameError:\n\n    T extends \"ACTION_REJECTED\" ? ActionRejectedError:\n\n    never;\n\n\n\n/**\n *  Returns true if the %%error%% matches an error thrown by ethers\n *  that matches the error %%code%%.\n *\n *  In TypeScript envornoments, this can be used to check that %%error%%\n *  matches an EthersError type, which means the expected properties will\n *  be set.\n *\n *  @See [ErrorCodes](api:ErrorCode)\n *  @example\n *    try {\n *      // code....\n *    } catch (e) {\n *      if (isError(e, \"CALL_EXCEPTION\")) {\n *          // The Type Guard has validated this object\n *          console.log(e.data);\n *      }\n *    }\n */\nexport function isError<K extends ErrorCode, T extends CodedEthersError<K>>(error: any, code: K): error is T {\n    return (error && (<EthersError>error).code === code);\n}\n\n/**\n *  Returns true if %%error%% is a [[CallExceptionError].\n */\nexport function isCallException(error: any): error is CallExceptionError {\n    return isError(error, \"CALL_EXCEPTION\");\n}\n\n/**\n *  Returns a new Error configured to the format ethers emits errors, with\n *  the %%message%%, [[api:ErrorCode]] %%code%% and additioanl properties\n *  for the corresponding EthersError.\n *\n *  Each error in ethers includes the version of ethers, a\n *  machine-readable [[ErrorCode]], and depneding on %%code%%, additional\n *  required properties. The error message will also include the %%meeage%%,\n *  ethers version, %%code%% and all aditional properties, serialized.\n */\nexport function makeError<K extends ErrorCode, T extends CodedEthersError<K>>(message: string, code: K, info?: ErrorInfo<T>): T {\n    {\n        const details: Array<string> = [];\n        if (info) {\n            if (\"message\" in info || \"code\" in info || \"name\" in info) {\n                throw new Error(`value will overwrite populated values: ${ stringify(info) }`);\n            }\n            for (const key in info) {\n                const value = <any>(info[<keyof ErrorInfo<T>>key]);\n//                try {\n                    details.push(key + \"=\" + stringify(value));\n//                } catch (error: any) {\n//                console.log(\"MMM\", error.message);\n//                    details.push(key + \"=[could not serialize object]\");\n//                }\n            }\n        }\n        details.push(`code=${ code }`);\n        details.push(`version=${ version }`);\n\n        if (details.length) {\n            message += \" (\" + details.join(\", \") + \")\";\n        }\n    }\n\n    let error;\n    switch (code) {\n        case \"INVALID_ARGUMENT\":\n            error = new TypeError(message);\n            break;\n        case \"NUMERIC_FAULT\":\n        case \"BUFFER_OVERRUN\":\n            error = new RangeError(message);\n            break;\n        default:\n            error = new Error(message);\n    }\n\n    defineProperties<EthersError>(<EthersError>error, { code });\n\n    if (info) { Object.assign(error, info); }\n\n    return <T>error;\n}\n\n/**\n *  Throws an EthersError with %%message%%, %%code%% and additional error\n *  %%info%% when %%check%% is falsish..\n *\n *  @see [[api:makeError]]\n */\nexport function assert<K extends ErrorCode, T extends CodedEthersError<K>>(check: unknown, message: string, code: K, info?: ErrorInfo<T>): asserts check {\n    if (!check) { throw makeError(message, code, info); }\n}\n\n\n/**\n *  A simple helper to simply ensuring provided arguments match expected\n *  constraints, throwing if not.\n *\n *  In TypeScript environments, the %%check%% has been asserted true, so\n *  any further code does not need additional compile-time checks.\n */\nexport function assertArgument(check: unknown, message: string, name: string, value: unknown): asserts check {\n    assert(check, message, \"INVALID_ARGUMENT\", { argument: name, value: value });\n}\n\nexport function assertArgumentCount(count: number, expectedCount: number, message?: string): void {\n    if (message == null) { message = \"\"; }\n    if (message) { message = \": \" + message; }\n\n    assert(count >= expectedCount, \"missing arguemnt\" + message, \"MISSING_ARGUMENT\", {\n        count: count,\n        expectedCount: expectedCount\n    });\n\n    assert(count <= expectedCount, \"too many arguemnts\" + message, \"UNEXPECTED_ARGUMENT\", {\n        count: count,\n        expectedCount: expectedCount\n    });\n}\n\nconst _normalizeForms = [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].reduce((accum, form) => {\n    try {\n        // General test for normalize\n        /* c8 ignore start */\n        if (\"test\".normalize(form) !== \"test\") { throw new Error(\"bad\"); };\n        /* c8 ignore stop */\n\n        if (form === \"NFD\") {\n            const check = String.fromCharCode(0xe9).normalize(\"NFD\");\n            const expected = String.fromCharCode(0x65, 0x0301)\n            /* c8 ignore start */\n            if (check !== expected) { throw new Error(\"broken\") }\n            /* c8 ignore stop */\n        }\n\n        accum.push(form);\n    } catch(error) { }\n\n    return accum;\n}, <Array<string>>[]);\n\n/**\n *  Throws if the normalization %%form%% is not supported.\n */\nexport function assertNormalize(form: string): void {\n    assert(_normalizeForms.indexOf(form) >= 0, \"platform missing String.prototype.normalize\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"String.prototype.normalize\", info: { form }\n    });\n}\n\n/**\n *  Many classes use file-scoped values to guard the constructor,\n *  making it effectively private. This facilitates that pattern\n *  by ensuring the %%givenGaurd%% matches the file-scoped %%guard%%,\n *  throwing if not, indicating the %%className%% if provided.\n */\nexport function assertPrivate(givenGuard: any, guard: any, className?: string): void {\n    if (className == null) { className = \"\"; }\n    if (givenGuard !== guard) {\n        let method = className, operation = \"new\";\n        if (className) {\n            method += \".\";\n            operation += \" \" + className;\n        }\n        assert(false, `private constructor; use ${ method }from* methods`, \"UNSUPPORTED_OPERATION\", {\n            operation\n        });\n    }\n}\n","/**\n *  Some data helpers.\n *\n *\n *  @_subsection api/utils:Data Helpers  [about-data]\n */\nimport { assert, assertArgument } from \"./errors.js\";\n\n/**\n *  A [[HexString]] whose length is even, which ensures it is a valid\n *  representation of binary data.\n */\nexport type DataHexString = string;\n\n/**\n *  A string which is prefixed with ``0x`` and followed by any number\n *  of case-agnostic hexadecimal characters.\n *\n *  It must match the regular expression ``/0x[0-9A-Fa-f]*\\/``.\n */\nexport type HexString = string;\n\n/**\n *  An object that can be used to represent binary data.\n */\nexport type BytesLike = DataHexString | Uint8Array;\n\nfunction _getBytes(value: BytesLike, name?: string, copy?: boolean): Uint8Array {\n    if (value instanceof Uint8Array) {\n        if (copy) { return new Uint8Array(value); }\n        return value;\n    }\n\n    if (typeof(value) === \"string\" && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {\n        const result = new Uint8Array((value.length - 2) / 2);\n        let offset = 2;\n        for (let i = 0; i < result.length; i++) {\n            result[i] = parseInt(value.substring(offset, offset + 2), 16);\n            offset += 2;\n        }\n        return result;\n    }\n\n    assertArgument(false, \"invalid BytesLike value\", name || \"value\", value);\n}\n\n/**\n *  Get a typed Uint8Array for %%value%%. If already a Uint8Array\n *  the original %%value%% is returned; if a copy is required use\n *  [[getBytesCopy]].\n *\n *  @see: getBytesCopy\n */\nexport function getBytes(value: BytesLike, name?: string): Uint8Array {\n    return _getBytes(value, name, false);\n}\n\n/**\n *  Get a typed Uint8Array for %%value%%, creating a copy if necessary\n *  to prevent any modifications of the returned value from being\n *  reflected elsewhere.\n *\n *  @see: getBytes\n */\nexport function getBytesCopy(value: BytesLike, name?: string): Uint8Array {\n    return _getBytes(value, name, true);\n}\n\n\n/**\n *  Returns true if %%value%% is a valid [[HexString]].\n *\n *  If %%length%% is ``true`` or a //number//, it also checks that\n *  %%value%% is a valid [[DataHexString]] of %%length%% (if a //number//)\n *  bytes of data (e.g. ``0x1234`` is 2 bytes).\n */\nexport function isHexString(value: any, length?: number | boolean): value is `0x${ string }` {\n    if (typeof(value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false\n    }\n\n    if (typeof(length) === \"number\" && value.length !== 2 + 2 * length) { return false; }\n    if (length === true && (value.length % 2) !== 0) { return false; }\n\n    return true;\n}\n\n/**\n *  Returns true if %%value%% is a valid representation of arbitrary\n *  data (i.e. a valid [[DataHexString]] or a Uint8Array).\n */\nexport function isBytesLike(value: any): value is BytesLike {\n    return (isHexString(value, true) || (value instanceof Uint8Array));\n}\n\nconst HexCharacters: string = \"0123456789abcdef\";\n\n/**\n *  Returns a [[DataHexString]] representation of %%data%%.\n */\nexport function hexlify(data: BytesLike): string {\n    const bytes = getBytes(data);\n\n    let result = \"0x\";\n    for (let i = 0; i < bytes.length; i++) {\n        const v = bytes[i];\n        result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n    }\n    return result;\n}\n\n/**\n *  Returns a [[DataHexString]] by concatenating all values\n *  within %%data%%.\n */\nexport function concat(datas: ReadonlyArray<BytesLike>): string {\n    return \"0x\" + datas.map((d) => hexlify(d).substring(2)).join(\"\");\n}\n\n/**\n *  Returns the length of %%data%%, in bytes.\n */\nexport function dataLength(data: BytesLike): number {\n    if (isHexString(data, true)) { return (data.length - 2) / 2; }\n    return getBytes(data).length;\n}\n\n/**\n *  Returns a [[DataHexString]] by slicing %%data%% from the %%start%%\n *  offset to the %%end%% offset.\n *\n *  By default %%start%% is 0 and %%end%% is the length of %%data%%.\n */\nexport function dataSlice(data: BytesLike, start?: number, end?: number): string {\n    const bytes = getBytes(data);\n    if (end != null && end > bytes.length) {\n        assert(false, \"cannot slice beyond data bounds\", \"BUFFER_OVERRUN\", {\n            buffer: bytes, length: bytes.length, offset: end\n        });\n    }\n    return hexlify(bytes.slice((start == null) ? 0: start, (end == null) ? bytes.length: end));\n}\n\n/**\n *  Return the [[DataHexString]] result by stripping all **leading**\n ** zero bytes from %%data%%.\n */\nexport function stripZerosLeft(data: BytesLike): string {\n    let bytes = hexlify(data).substring(2);\n    while (bytes.startsWith(\"00\")) { bytes = bytes.substring(2); }\n    return \"0x\" + bytes;\n}\n\nfunction zeroPad(data: BytesLike, length: number, left: boolean): string {\n    const bytes = getBytes(data);\n    assert(length >= bytes.length, \"padding exceeds data length\", \"BUFFER_OVERRUN\", {\n        buffer: new Uint8Array(bytes),\n        length: length,\n        offset: length + 1\n    });\n\n    const result = new Uint8Array(length);\n    result.fill(0);\n    if (left) {\n        result.set(bytes, length - bytes.length);\n    } else {\n        result.set(bytes, 0);\n    }\n\n    return hexlify(result);\n}\n\n/**\n *  Return the [[DataHexString]] of %%data%% padded on the **left**\n *  to %%length%% bytes.\n *\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\n *  thrown.\n *\n *  This pads data the same as **values** are in Solidity\n *  (e.g. ``uint128``).\n */\nexport function zeroPadValue(data: BytesLike, length: number): string {\n    return zeroPad(data, length, true);\n}\n\n/**\n *  Return the [[DataHexString]] of %%data%% padded on the **right**\n *  to %%length%% bytes.\n *\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\n *  thrown.\n *\n *  This pads data the same as **bytes** are in Solidity\n *  (e.g. ``bytes16``).\n */\nexport function zeroPadBytes(data: BytesLike, length: number): string {\n    return zeroPad(data, length, false);\n}\n","\nexport {\n    createHash, createHmac, pbkdf2Sync, randomBytes\n} from \"crypto\";\n","import { createHash } from \"./crypto.js\";\n\nimport { getBytes, hexlify } from \"../utils/index.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\n\nconst _sha256 = function(data: Uint8Array): Uint8Array {\n    return createHash(\"sha256\").update(data).digest();\n}\n\nconst _sha512 = function(data: Uint8Array): Uint8Array {\n    return createHash(\"sha512\").update(data).digest();\n}\n\nlet __sha256: (data: Uint8Array) => BytesLike = _sha256;\nlet __sha512: (data: Uint8Array) => BytesLike = _sha512;\n\nlet locked256 = false, locked512 = false;\n\n\n/**\n *  Compute the cryptographic SHA2-256 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha256(\"0x\")\n *    //_result:\n *\n *    sha256(\"0x1337\")\n *    //_result:\n *\n *    sha256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */\nexport function sha256(_data: BytesLike): string {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__sha256(data));\n}\nsha256._ = _sha256;\nsha256.lock = function(): void { locked256 = true; }\nsha256.register = function(func: (data: Uint8Array) => BytesLike): void {\n    if (locked256) { throw new Error(\"sha256 is locked\"); }\n    __sha256 = func;\n}\nObject.freeze(sha256);\n\n\n/**\n *  Compute the cryptographic SHA2-512 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha512(\"0x\")\n *    //_result:\n *\n *    sha512(\"0x1337\")\n *    //_result:\n *\n *    sha512(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n */\nexport function sha512(_data: BytesLike): string {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__sha512(data));\n}\nsha512._ = _sha512;\nsha512.lock = function(): void { locked512 = true; }\nsha512.register = function(func: (data: Uint8Array) => BytesLike): void {\n    if (locked512) { throw new Error(\"sha512 is locked\"); }\n    __sha512 = func;\n}\nObject.freeze(sha256);\n","import type { BytesLike } from 'ethers';\nimport { sha256 } from 'ethers';\n\n/**\n * The primary hash function for Fuel\n * SHA-256\n */\nexport function hash(data: BytesLike): string {\n  return sha256(data);\n}\n","class Node {\n  left: number;\n  right: number;\n  parent: number;\n  hash: string;\n  data: string;\n  index: number;\n\n  constructor(\n    left: number,\n    right: number,\n    parent: number,\n    hash: string,\n    data: string,\n    index: number = 0\n  ) {\n    this.left = left;\n    this.right = right;\n    this.parent = parent;\n    this.hash = hash;\n    this.data = data;\n    this.index = index;\n  }\n}\n\nexport default Node;\n","// A set of useful helper methods for testing binary Merkle trees.\nimport { EMPTY, hash } from '../common';\n\nimport Node from './types/node';\n\n/**\n * Slice off the '0x' on each argument to simulate abi.encodePacked\n */\nexport function hashLeaf(data: string): string {\n  return hash('0x00'.concat(data.slice(2)));\n}\n\n/**\n * Slice off the '0x' on each argument to simulate abi.encodePacked\n * hash(prefix +  left + right)\n */\nexport function hashNode(left: string, right: string): string {\n  return hash('0x01'.concat(left.slice(2)).concat(right.slice(2)));\n}\n\n/**\n * Construct tree\n */\nexport function constructTree(data: string[]): Node[] {\n  const nodes = [];\n  for (let i = 0; i < data.length; i += 1) {\n    const hashed = hashLeaf(data[i]);\n    const leaf = new Node(-1, -1, -1, hashed, data[i]);\n    leaf.index = i;\n    nodes.push(leaf);\n  }\n\n  const nodesList = [...nodes];\n  let pNodes = [...nodes];\n\n  let size = (nodes.length + 1) >> 1;\n  let odd = nodes.length & 1;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let i = 0;\n    for (; i < size - odd; i += 1) {\n      const j = i << 1;\n      const hashed = hashNode(pNodes[j].hash, pNodes[j + 1].hash);\n      nodes[i] = new Node(pNodes[j].index, pNodes[j + 1].index, -1, hashed, '');\n      const nextIndex = nodesList.length;\n      nodes[i].index = nextIndex;\n\n      nodesList[pNodes[j].index].parent = nextIndex;\n      nodesList[pNodes[j + 1].index].parent = nextIndex;\n      nodesList.push(nodes[i]);\n    }\n\n    if (size === 1) {\n      break;\n    }\n\n    if (odd === 1) {\n      nodes[i] = pNodes[i << 1];\n    }\n\n    odd = size & 1;\n    size = (size + 1) >> 1;\n    pNodes = [...nodes];\n  }\n  return nodesList;\n}\n\n/**\n * Compute the merkle root\n */\nexport function calcRoot(data: string[]): string {\n  if (!data.length) {\n    return EMPTY;\n  }\n  const nodes = [];\n  for (let i = 0; i < data.length; i += 1) {\n    const hashed = hashLeaf(data[i]);\n    nodes.push(new Node(-1, -1, -1, hashed, data[i]));\n  }\n  let pNodes = nodes;\n  let size = (nodes.length + 1) >> 1;\n  let odd = nodes.length & 1;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let i = 0;\n    for (; i < size - odd; i += 1) {\n      const j = i << 1;\n      const hashed = hashNode(pNodes[j].hash, pNodes[j + 1].hash);\n      nodes[i] = new Node(pNodes[j].index, pNodes[j + 1].index, -1, hashed, '');\n    }\n    if (odd === 1) {\n      nodes[i] = pNodes[i << 1];\n    }\n    if (size === 1) {\n      break;\n    }\n    odd = size & 1;\n    size = (size + 1) >> 1;\n    pNodes = nodes;\n  }\n  return nodes[0].hash;\n}\n\n/**\n * Get proof for the leaf\n */\nexport function getProof(nodes: Node[], id: number): string[] {\n  const proof: string[] = [];\n  for (let prev = id, cur = nodes[id].parent; cur !== -1; prev = cur, cur = nodes[cur].parent) {\n    if (nodes[cur].left === prev) {\n      proof.push(nodes[nodes[cur].right].hash);\n    } else {\n      proof.push(nodes[nodes[cur].left].hash);\n    }\n  }\n  return proof;\n}\n","import { hash } from '../common';\n\nexport const leafPrefix = '0x00';\nexport const nodePrefix = '0x01';\n\n/**\n * Slice off the '0x' on each argument to simulate abi.encode\n * prefix + key + hash(data)\n */\nexport function hashLeaf(key: string, data: string): [string, string] {\n  const value = '0x00'.concat(key.slice(2)).concat(hash(data).slice(2));\n  return [hash(value), value];\n}\n\n/**\n * Slice off the '0x' on each argument to simulate abi.encodePacked\n * prefix + key + hash(data)\n */\nexport function hashNode(left: string, right: string): [string, string] {\n  const value = '0x01'.concat(left.slice(2)).concat(right.slice(2));\n  return [hash(value), value];\n}\n\n/**\n * Parse a leaf\n */\nexport function parseLeaf(data: string): [string, string] {\n  const len = nodePrefix.length;\n  return ['0x'.concat(data.slice(len, len + 64)), '0x'.concat(data.slice(len + 64))];\n}\n\n/**\n * Parse a nodes\n */\nexport function parseNode(data: string): [string, string] {\n  const len = nodePrefix.length;\n  return ['0x'.concat(data.slice(len, len + 64)), '0x'.concat(data.slice(len + 64))];\n}\n\n/**\n * Check if data is a leaf by checking prefix\n */\nexport function isLeaf(data: string): boolean {\n  return data.slice(0, 4) === leafPrefix;\n}\n","class SparseCompactMerkleProof {\n  SideNodes: string[];\n  NonMembershipLeafData: string;\n  BitMask: number[];\n  NumSideNodes: number;\n  SiblingData: string;\n\n  constructor(\n    SideNodes: string[],\n    NonMembershipLeafData: string,\n    Bitmask: number[],\n    NumSideNodes: number,\n    SiblingData: string\n  ) {\n    this.SideNodes = SideNodes;\n    this.NonMembershipLeafData = NonMembershipLeafData;\n    this.BitMask = Bitmask;\n    this.NumSideNodes = NumSideNodes;\n    this.SiblingData = SiblingData;\n  }\n}\n\nexport default SparseCompactMerkleProof;\n","// Sparse Merkle proof\nclass SparseMerkleProof {\n  SideNodes: string[];\n  NonMembershipLeafData: string;\n  SiblingData: string;\n\n  constructor(sideNodes: string[], NonMembershipLeafData: string, SiblingData: string) {\n    this.SideNodes = sideNodes;\n    this.NonMembershipLeafData = NonMembershipLeafData;\n    this.SiblingData = SiblingData;\n  }\n}\n\nexport default SparseMerkleProof;\n","export const ZERO = '0x0000000000000000000000000000000000000000000000000000000000000000';\nexport const EMPTY = '0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';\nexport const MAX_HEIGHT = 256;\n\nexport interface MapStore {\n  [key: string]: string;\n}\n\n/**\n * Gets the bit at an offset from the most significant bit\n */\nexport function getBitAtFromMSB(data: string, position: number): number {\n  // if int(data[position / 8]) & (1 << (8 - 1 - uint(position) % 8)) > 0\n\n  // Slice off '0x'\n  const slicedData = data.slice(2);\n  // Get byte that contains the specified position\n  const byte = '0x'.concat(\n    slicedData.slice(Math.floor(position / 8) * 2, Math.floor(position / 8) * 2 + 2)\n  );\n  // Get bits from specified position within that byte\n  const bits = Number(byte) & (1 << (8 - 1 - (position % 8)));\n\n  // Bit at position = 0 IFF bits > 0.\n  if (bits > 0) {\n    return 1;\n  }\n  return 0;\n}\n/**\n * Reverse the nodes position\n */\nexport function reverseSideNodes(sideNodes: string[]): string[] {\n  let left = 0;\n  let right = sideNodes.length - 1;\n  const reversedSideNodes: string[] = sideNodes;\n\n  while (left < right) {\n    [reversedSideNodes[left], reversedSideNodes[right]] = [\n      reversedSideNodes[right],\n      reversedSideNodes[left],\n    ];\n    left += 1;\n    right -= 1;\n  }\n\n  return reversedSideNodes;\n}\n\n/**\n * Counts the common bit at at an offset from the most significant bit\n * between two inputs\n */\nexport function countCommonPrefix(data1: string, data2: string): number {\n  let count = 0;\n  for (let i = 0; i < MAX_HEIGHT; i += 1) {\n    if (getBitAtFromMSB(data1, i) === getBitAtFromMSB(data2, i)) {\n      count += 1;\n    } else {\n      break;\n    }\n  }\n  return count;\n}\n","import { hash } from '../common';\n\nimport { hashLeaf, hashNode, parseLeaf } from './treeHasher';\nimport SparseCompactMerkleProof from './types/sparseCompactMerkleProof';\nimport SparseMerkleProof from './types/sparseMerkleProof';\nimport { getBitAtFromMSB, ZERO } from './utils';\n\n/**\n * Verify a merkle proof\n */\nexport function verifyProof(\n  proof: SparseMerkleProof,\n  root: string,\n  key: string,\n  value: string\n): [boolean, string[][]] {\n  const updates: string[][] = [[]];\n\n  // Detemine what the leaf hash should be\n  let currentHash;\n  let currentData;\n  let actualPath;\n  let valueHash;\n\n  if (value === ZERO) {\n    // Non-membership proof\n    if (proof.NonMembershipLeafData === '') {\n      currentHash = ZERO;\n    } else {\n      // leaf is an unrelated leaf\n      [actualPath, valueHash] = parseLeaf(proof.NonMembershipLeafData);\n      if (actualPath === key) {\n        // Leaf does exist : non-membership proof failed\n        return [false, []];\n      }\n      [currentHash, currentData] = hashLeaf(actualPath, valueHash);\n      updates.push([currentHash, currentData]);\n    }\n  } else {\n    // Membership proof\n    valueHash = hash(value);\n    updates.push([valueHash, value]);\n\n    [currentHash, currentData] = hashLeaf(key, value);\n    updates.push([currentHash, currentData]);\n  }\n\n  // Recompute root\n  for (let i = 0; i < proof.SideNodes.length; i += 1) {\n    const node = proof.SideNodes[i];\n\n    if (getBitAtFromMSB(key, proof.SideNodes.length - 1 - i) === 1) {\n      [currentHash, currentData] = hashNode(node, currentHash);\n    } else {\n      [currentHash, currentData] = hashNode(currentHash, node);\n    }\n\n    updates.push([currentHash, currentData]);\n  }\n\n  return [currentHash === root, updates];\n}\n\n/**\n * Compact a Sparse Merkle Proof using a bitmask\n */\nexport function compactProof(proof: SparseMerkleProof): SparseCompactMerkleProof {\n  const bitMask: number[] = [];\n  const compactedSideNodes: string[] = [];\n  let node;\n\n  for (let i = 0; i < proof.SideNodes.length; i += 1) {\n    node = proof.SideNodes[i];\n    if (node === ZERO) {\n      bitMask.push(0);\n    } else {\n      compactedSideNodes.push(node);\n      bitMask.push(1);\n    }\n  }\n  const compactedProof = new SparseCompactMerkleProof(\n    compactedSideNodes,\n    proof.NonMembershipLeafData,\n    bitMask,\n    proof.SideNodes.length,\n    proof.SiblingData\n  );\n  return compactedProof;\n}\n\n/**\n * Decompact a Sparse Merkle Proof\n */\nexport function decompactProof(proof: SparseCompactMerkleProof): SparseMerkleProof {\n  const decompactedSideNodes: string[] = [];\n  let position = 0;\n\n  for (let i = 0; i < proof.NumSideNodes; i += 1) {\n    if (proof.BitMask[i] === 0) {\n      decompactedSideNodes[i] = ZERO;\n    } else {\n      decompactedSideNodes[i] = proof.SideNodes[position];\n      position += 1;\n    }\n  }\n  const decompactedProof = new SparseMerkleProof(\n    decompactedSideNodes,\n    proof.NonMembershipLeafData,\n    proof.SiblingData\n  );\n\n  return decompactedProof;\n}\n","/// @dev The Fuel testing Merkle trees.\n/// A set of useful helper methods for testing and deploying Merkle trees.\nimport { hash } from '../common';\n\nimport { compactProof } from './proofs';\nimport { isLeaf, hashLeaf, hashNode, parseLeaf, parseNode } from './treeHasher';\nimport type SparseCompactMerkleProof from './types/sparseCompactMerkleProof';\nimport SparseMerkleProof from './types/sparseMerkleProof';\nimport type { MapStore } from './utils';\nimport { ZERO, MAX_HEIGHT, getBitAtFromMSB, reverseSideNodes, countCommonPrefix } from './utils';\n\nexport class SparseMerkleTree {\n  ms: MapStore;\n\n  root: string;\n\n  constructor() {\n    const ms: MapStore = {};\n    this.ms = ms;\n    this.root = ZERO;\n    this.ms[this.root] = ZERO;\n  }\n\n  get(key: string): string {\n    return this.ms[key];\n  }\n\n  set(key: string, value: string): void {\n    this.ms[key] = value;\n  }\n\n  setRoot(root: string): void {\n    this.root = root;\n  }\n\n  sideNodesForRoot(key: string, root: string): [string[], string, string, string] {\n    const sideNodes: string[] = [];\n\n    // If the root is a placeholder, there are no sidenodes to return.\n    // The data is nil, and the sibling is nil\n    if (root === ZERO) {\n      return [sideNodes, ZERO, '', ''];\n    }\n\n    let currentData = this.get(root);\n\n    // If the root is a leaf, there are also no sidenodes to return.\n    // The data is the leaf data, and the sibling is nil\n    if (isLeaf(currentData)) {\n      return [sideNodes, root, currentData, ''];\n    }\n\n    let leftNode;\n    let rightNode;\n    let nodeHash = '';\n    let sideNode = '';\n\n    for (let i = 0; i < MAX_HEIGHT; i += 1) {\n      [leftNode, rightNode] = parseNode(currentData);\n\n      if (getBitAtFromMSB(key, i) === 1) {\n        sideNode = leftNode;\n        nodeHash = rightNode;\n      } else {\n        sideNode = rightNode;\n        nodeHash = leftNode;\n      }\n\n      sideNodes.push(sideNode);\n\n      // If the node is a placeholder, we've reached the end.\n      if (nodeHash === ZERO) {\n        currentData = '';\n        break;\n      }\n\n      currentData = this.get(nodeHash);\n\n      // If the node is a leaf, we've reached the end.\n      if (isLeaf(currentData)) {\n        break;\n      }\n    }\n\n    const siblingData = this.get(sideNode);\n\n    return [reverseSideNodes(sideNodes), nodeHash, currentData, siblingData];\n  }\n\n  deleteWithSideNodes(\n    key: string,\n    sideNodes: string[],\n    oldLeafHash: string,\n    oldLeafData: string\n  ): string {\n    // If value already zero, deletion changes nothing. Just return current root\n\n    if (oldLeafHash === ZERO) {\n      return this.root;\n    }\n\n    // If key is already empty (different key found in its place), deletion changed nothing. Just return current root\n    const [actualPath] = parseLeaf(oldLeafData);\n\n    if (actualPath !== key) {\n      return this.root;\n    }\n\n    let currentHash = '';\n    let currentData = '';\n    let sideNode = '';\n    let sideNodeValue = '';\n    let nonPlaceholderReached = false;\n\n    for (let i = 0; i < sideNodes.length; i += 1) {\n      if (sideNodes[i] === '') {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      sideNode = sideNodes[i];\n\n      if (currentData === '') {\n        sideNodeValue = this.get(sideNode);\n\n        if (isLeaf(sideNodeValue)) {\n          // This is the leaf sibling that needs to be percolated up the tree.\n          currentHash = sideNode;\n          currentData = sideNode;\n          // eslint-disable-next-line no-continue\n          continue;\n        } else {\n          // This is the node sibling that needs to be left in its place.\n          currentData = ZERO;\n          nonPlaceholderReached = true;\n        }\n      }\n\n      if (!nonPlaceholderReached && sideNode === ZERO) {\n        // We found another placeholder sibling node, keep going up the\n        // tree until we find the first sibling that is not a placeholder.\n        // eslint-disable-next-line no-continue\n        continue;\n      } else if (!nonPlaceholderReached) {\n        // We found the first sibling node that is not a placeholder, it is\n        // time to insert our leaf sibling node here.\n        nonPlaceholderReached = true;\n      }\n\n      if (getBitAtFromMSB(key, sideNodes.length - 1 - i) === 1) {\n        [currentHash, currentData] = hashNode(sideNode, currentData);\n      } else {\n        [currentHash, currentData] = hashNode(currentData, sideNode);\n      }\n      this.set(currentHash, currentData);\n      currentData = currentHash;\n    }\n\n    // The tree is empty; return placeholder value as root.\n    // How can currentHash be '' / nil if it's a hash ?\n    if (currentHash === '') {\n      currentHash = ZERO;\n    }\n\n    return currentHash;\n  }\n\n  updateWithSideNodes(\n    key: string,\n    value: string,\n    sideNodes: string[],\n    oldLeafHash: string,\n    oldLeafData: string\n  ): string {\n    let currentHash;\n    let currentData;\n\n    this.set(hash(value), value);\n\n    [currentHash, currentData] = hashLeaf(key, value);\n    this.set(currentHash, currentData);\n\n    currentData = currentHash;\n\n    // If the leaf node that sibling nodes lead to has a different actual path\n    // than the leaf node being updated, we need to create an intermediate node\n    // with this leaf node and the new leaf node as children.\n    //\n    // First, get the number of bits that the paths of the two leaf nodes share\n    // in common as a prefix.\n\n    let commonPrefixCount;\n\n    if (oldLeafHash === ZERO) {\n      commonPrefixCount = MAX_HEIGHT;\n    } else {\n      const [actualPath] = parseLeaf(oldLeafData);\n      commonPrefixCount = countCommonPrefix(key, actualPath);\n    }\n\n    if (commonPrefixCount !== MAX_HEIGHT) {\n      if (getBitAtFromMSB(key, commonPrefixCount) === 1) {\n        [currentHash, currentData] = hashNode(oldLeafHash, currentData);\n      } else {\n        [currentHash, currentData] = hashNode(currentData, oldLeafHash);\n      }\n      this.set(currentHash, currentData);\n      currentData = currentHash;\n    }\n\n    for (let i = 0; i < MAX_HEIGHT; i += 1) {\n      let sideNode;\n      const offsetOfSideNodes = MAX_HEIGHT - sideNodes.length;\n\n      // If there are no sidenodes at this height, but the number of\n      // bits that the paths of the two leaf nodes share in common is\n      // greater than this height, then we need to build up the tree\n      // to this height with placeholder values at siblings.\n\n      if (i - offsetOfSideNodes < 0 || sideNodes[i - offsetOfSideNodes] === '') {\n        if (commonPrefixCount !== MAX_HEIGHT && commonPrefixCount > MAX_HEIGHT - 1 - i) {\n          sideNode = ZERO;\n        } else {\n          // eslint-disable-next-line no-continue\n          continue;\n        }\n      } else {\n        sideNode = sideNodes[i - offsetOfSideNodes];\n      }\n\n      if (getBitAtFromMSB(key, MAX_HEIGHT - 1 - i) === 1) {\n        [currentHash, currentData] = hashNode(sideNode, currentData);\n      } else {\n        [currentHash, currentData] = hashNode(currentData, sideNode);\n      }\n\n      this.set(currentHash, currentData);\n      currentData = currentHash;\n    }\n\n    return currentHash;\n  }\n\n  update(key: string, value: string): void {\n    const [sideNodes, oldLeafHash, oldLeafData] = this.sideNodesForRoot(key, this.root);\n    const newRoot = this.updateWithSideNodes(key, value, sideNodes, oldLeafHash, oldLeafData);\n    this.setRoot(newRoot);\n  }\n\n  delete(key: string): void {\n    const [sideNodes, oldLeafHash, oldLeafData] = this.sideNodesForRoot(key, this.root);\n    const newRoot = this.deleteWithSideNodes(key, sideNodes, oldLeafHash, oldLeafData);\n    this.setRoot(newRoot);\n  }\n\n  prove(key: string): SparseMerkleProof {\n    const [sideNodes, leafHash, leafData, siblingData] = this.sideNodesForRoot(key, this.root);\n\n    const nonEmptySideNodes: string[] = [];\n\n    for (let i = 0; i < sideNodes.length; i += 1) {\n      if (sideNodes[i] !== '') {\n        nonEmptySideNodes.push(sideNodes[i]);\n      }\n    }\n\n    // Deal with non-membership proofs. If the leaf hash is the placeholder\n    // value, we do not need to add anything else to the proof.\n    let nonMembershipLeafData = '';\n    if (leafHash !== ZERO) {\n      const [actualPath] = parseLeaf(leafData);\n      if (actualPath !== key) {\n        // This is a non-membership proof that involves showing a different leaf.\n        // Add the leaf data to the proof.\n        nonMembershipLeafData = leafData;\n      }\n    }\n\n    const proof = new SparseMerkleProof(nonEmptySideNodes, nonMembershipLeafData, siblingData);\n    return proof;\n  }\n\n  proveCompacted(key: string): SparseCompactMerkleProof {\n    const proof = this.prove(key);\n    const compactedProof = compactProof(proof);\n    return compactedProof;\n  }\n}\n"],"mappings":";;;;;;;;;;;AAGO,MAAM,QAAQ;;;ACEd,MAAM,UAAkB;;;ACC/B,WAAS,UAAU,OAAY,MAAc,MAAY;AACrD,UAAM,QAAQ,KAAK,MAAM,GAAG,EAAE,IAAI,OAAK,EAAE,KAAI,CAAE;AAC/C,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,cAAQ,MAAM;QACV,KAAK;AACD;QACJ,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;AACD,cAAI,OAAO,UAAW,MAAM;AAAE;;;;AAI1C,UAAM,QAAa,IAAI,MAAM,0BAA2B,MAAO;AAC/D,UAAM,OAAO;AACb,UAAM,WAAW,SAAU;AAC3B,UAAM,QAAQ;AAEd,UAAM;EACV;AAoBM,WAAU,iBACf,QACA,QACA,OAAqC;AAElC,aAAS,OAAO,QAAQ;AACpB,UAAI,QAAQ,OAAO,GAAG;AAEtB,YAAM,OAAQ,QAAQ,MAAM,GAAG,IAAG;AAClC,UAAI,MAAM;AAAE,kBAAU,OAAO,MAAM,GAAG;;AAEtC,aAAO,eAAe,QAAQ,KAAK,EAAE,YAAY,MAAM,OAAO,UAAU,MAAK,CAAE;;EAEvF;;;AChCA,WAAS,UAAU,OAAU;AACzB,QAAI,SAAS,MAAM;AAAE,aAAO;;AAE5B,QAAI,MAAM,QAAQ,KAAK,GAAG;AACtB,aAAO,OAAQ,MAAM,IAAI,SAAS,EAAG,KAAK,IAAI,IAAI;;AAGtD,QAAI,iBAAiB,YAAY;AAC7B,YAAM,MAAM;AACZ,UAAI,SAAS;AACb,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,kBAAU,IAAI,MAAM,CAAC,KAAK,CAAC;AAC3B,kBAAU,IAAI,MAAM,CAAC,IAAI,EAAG;;AAEhC,aAAO;;AAGX,QAAI,OAAO,UAAW,YAAY,OAAO,MAAM,WAAY,YAAY;AACnE,aAAO,UAAU,MAAM,OAAM,CAAE;;AAGnC,YAAQ,OAAO,OAAQ;MACnB,KAAK;MAAW,KAAK;AACjB,eAAO,MAAM,SAAQ;MACzB,KAAK;AACD,eAAO,OAAO,KAAK,EAAE,SAAQ;MACjC,KAAK;AACD,eAAQ,MAAO,SAAQ;MAC3B,KAAK;AACD,eAAO,KAAK,UAAU,KAAK;MAC/B,KAAK,UAAU;AACX,cAAM,OAAO,OAAO,KAAK,KAAK;AAC9B,aAAK,KAAI;AACT,eAAO,OAAO,KAAK,IAAI,CAAC,MAAM,GAAI,UAAU,CAAC,MAAQ,UAAU,MAAM,CAAC,CAAC,GAAI,EAAE,KAAK,IAAI,IAAI;;;AAIlG,WAAO;EACX;AAwkBM,WAAU,UAA8D,SAAiB,MAAS,MAAmB;AACvH;AACI,YAAM,UAAyB,CAAA;AAC/B,UAAI,MAAM;AACN,YAAI,aAAa,QAAQ,UAAU,QAAQ,UAAU,MAAM;AACvD,gBAAM,IAAI,MAAM,0CAA2C,UAAU,IAAI,GAAI;;AAEjF,mBAAW,OAAO,MAAM;AACpB,gBAAM,QAAc,KAAyB,GAAG;AAE5C,kBAAQ,KAAK,MAAM,MAAM,UAAU,KAAK,CAAC;;;AAOrD,cAAQ,KAAK,QAAS,MAAO;AAC7B,cAAQ,KAAK,WAAY,SAAU;AAEnC,UAAI,QAAQ,QAAQ;AAChB,mBAAW,OAAO,QAAQ,KAAK,IAAI,IAAI;;;AAI/C,QAAI;AACJ,YAAQ,MAAM;MACV,KAAK;AACD,gBAAQ,IAAI,UAAU,OAAO;AAC7B;MACJ,KAAK;MACL,KAAK;AACD,gBAAQ,IAAI,WAAW,OAAO;AAC9B;MACJ;AACI,gBAAQ,IAAI,MAAM,OAAO;;AAGjC,qBAA2C,OAAO,EAAE,KAAI,CAAE;AAE1D,QAAI,MAAM;AAAE,aAAO,OAAO,OAAO,IAAI;;AAErC,WAAU;EACd;AAQM,WAAU,OAA2D,OAAgB,SAAiB,MAAS,MAAmB;AACpI,QAAI,CAAC,OAAO;AAAE,YAAM,UAAU,SAAS,MAAM,IAAI;;EACrD;AAUM,WAAU,eAAe,OAAgB,SAAiB,MAAc,OAAc;AACxF,WAAO,OAAO,SAAS,oBAAoB,EAAE,UAAU,MAAM,MAAY,CAAE;EAC/E;AAiBA,MAAM,kBAAkB,CAAC,OAAO,OAAO,QAAQ,MAAM,EAAE,OAAO,CAAC,OAAO,SAAQ;AAC1E,QAAI;AAGA,UAAI,OAAO,UAAU,IAAI,MAAM,QAAQ;AAAE,cAAM,IAAI,MAAM,KAAK;;AAAI;AAGlE,UAAI,SAAS,OAAO;AAChB,cAAM,QAAQ,OAAO,aAAa,GAAI,EAAE,UAAU,KAAK;AACvD,cAAM,WAAW,OAAO,aAAa,KAAM,GAAM;AAEjD,YAAI,UAAU,UAAU;AAAE,gBAAM,IAAI,MAAM,QAAQ;;;AAItD,YAAM,KAAK,IAAI;aACX,OAAN;IAAa;AAEf,WAAO;EACX,GAAkB,CAAA,CAAE;;;ACntBpB,WAAS,UAAU,OAAkB,MAAe,MAAc;AAC9D,QAAI,iBAAiB,YAAY;AAC7B,UAAI,MAAM;AAAE,eAAO,IAAI,WAAW,KAAK;;AACvC,aAAO;;AAGX,QAAI,OAAO,UAAW,YAAY,MAAM,MAAM,0BAA0B,GAAG;AACvE,YAAM,SAAS,IAAI,YAAY,MAAM,SAAS,KAAK,CAAC;AACpD,UAAI,SAAS;AACb,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,eAAO,CAAC,IAAI,SAAS,MAAM,UAAU,QAAQ,SAAS,CAAC,GAAG,EAAE;AAC5D,kBAAU;;AAEd,aAAO;;AAGX,mBAAe,OAAO,2BAA2B,QAAQ,SAAS,KAAK;EAC3E;AASM,WAAU,SAAS,OAAkB,MAAa;AACpD,WAAO,UAAU,OAAO,MAAM,KAAK;EACvC;AAwCA,MAAM,gBAAwB;AAKxB,WAAU,QAAQ,MAAe;AACnC,UAAM,QAAQ,SAAS,IAAI;AAE3B,QAAI,SAAS;AACb,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,YAAM,IAAI,MAAM,CAAC;AACjB,gBAAU,eAAe,IAAI,QAAS,CAAC,IAAI,cAAc,IAAI,EAAI;;AAErE,WAAO;EACX;;;AC5GA,sBAEO;;;ACIP,MAAM,UAAU,SAAS,MAAgB;AACrC,eAAO,0BAAW,QAAQ,EAAE,OAAO,IAAI,EAAE,OAAM;EACnD;AAEA,MAAM,UAAU,SAAS,MAAgB;AACrC,eAAO,0BAAW,QAAQ,EAAE,OAAO,IAAI,EAAE,OAAM;EACnD;AAEA,MAAI,WAA4C;AAChD,MAAI,WAA4C;AAEhD,MAAI,YAAY;AAAhB,MAAuB,YAAY;AAoB7B,WAAU,OAAO,OAAgB;AACnC,UAAM,OAAO,SAAS,OAAO,MAAM;AACnC,WAAO,QAAQ,SAAS,IAAI,CAAC;EACjC;AACA,SAAO,IAAI;AACX,SAAO,OAAO,WAAA;AAAmB,gBAAY;EAAM;AACnD,SAAO,WAAW,SAAS,MAAqC;AAC5D,QAAI,WAAW;AAAE,YAAM,IAAI,MAAM,kBAAkB;;AACnD,eAAW;EACf;AACA,SAAO,OAAO,MAAM;AAmBd,WAAU,OAAO,OAAgB;AACnC,UAAM,OAAO,SAAS,OAAO,MAAM;AACnC,WAAO,QAAQ,SAAS,IAAI,CAAC;EACjC;AACA,SAAO,IAAI;AACX,SAAO,OAAO,WAAA;AAAmB,gBAAY;EAAM;AACnD,SAAO,WAAW,SAAS,MAAqC;AAC5D,QAAI,WAAW;AAAE,YAAM,IAAI,MAAM,kBAAkB;;AACnD,eAAW;EACf;AACA,SAAO,OAAO,MAAM;;;ACtEb,WAAS,KAAK,MAAyB;AAC5C,WAAO,OAAO,IAAI;AAAA,EACpB;;;ACTA,MAAM,OAAN,MAAW;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IAEA,YACE,MACA,OACA,QACAA,OACA,MACA,QAAgB,GAChB;AACA,WAAK,OAAO;AACZ,WAAK,QAAQ;AACb,WAAK,SAAS;AACd,WAAK,OAAOA;AACZ,WAAK,OAAO;AACZ,WAAK,QAAQ;AAAA,IACf;AAAA,EACF;AAEA,MAAO,eAAQ;;;ACjBR,WAAS,SAAS,MAAsB;AAC7C,WAAO,KAAK,OAAO,OAAO,KAAK,MAAM,CAAC,CAAC,CAAC;AAAA,EAC1C;AAMO,WAAS,SAAS,MAAc,OAAuB;AAC5D,WAAO,KAAK,OAAO,OAAO,KAAK,MAAM,CAAC,CAAC,EAAE,OAAO,MAAM,MAAM,CAAC,CAAC,CAAC;AAAA,EACjE;AAKO,WAAS,cAAc,MAAwB;AACpD,UAAM,QAAQ,CAAC;AACf,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK,GAAG;AACvC,YAAM,SAAS,SAAS,KAAK,CAAC,CAAC;AAC/B,YAAM,OAAO,IAAI,aAAK,IAAI,IAAI,IAAI,QAAQ,KAAK,CAAC,CAAC;AACjD,WAAK,QAAQ;AACb,YAAM,KAAK,IAAI;AAAA,IACjB;AAEA,UAAM,YAAY,CAAC,GAAG,KAAK;AAC3B,QAAI,SAAS,CAAC,GAAG,KAAK;AAEtB,QAAI,OAAQ,MAAM,SAAS,KAAM;AACjC,QAAI,MAAM,MAAM,SAAS;AAEzB,WAAO,MAAM;AACX,UAAI,IAAI;AACR,aAAO,IAAI,OAAO,KAAK,KAAK,GAAG;AAC7B,cAAM,IAAI,KAAK;AACf,cAAM,SAAS,SAAS,OAAO,CAAC,EAAE,MAAM,OAAO,IAAI,CAAC,EAAE,IAAI;AAC1D,cAAM,CAAC,IAAI,IAAI,aAAK,OAAO,CAAC,EAAE,OAAO,OAAO,IAAI,CAAC,EAAE,OAAO,IAAI,QAAQ,EAAE;AACxE,cAAM,YAAY,UAAU;AAC5B,cAAM,CAAC,EAAE,QAAQ;AAEjB,kBAAU,OAAO,CAAC,EAAE,KAAK,EAAE,SAAS;AACpC,kBAAU,OAAO,IAAI,CAAC,EAAE,KAAK,EAAE,SAAS;AACxC,kBAAU,KAAK,MAAM,CAAC,CAAC;AAAA,MACzB;AAEA,UAAI,SAAS,GAAG;AACd;AAAA,MACF;AAEA,UAAI,QAAQ,GAAG;AACb,cAAM,CAAC,IAAI,OAAO,KAAK,CAAC;AAAA,MAC1B;AAEA,YAAM,OAAO;AACb,aAAQ,OAAO,KAAM;AACrB,eAAS,CAAC,GAAG,KAAK;AAAA,IACpB;AACA,WAAO;AAAA,EACT;AAKO,WAAS,SAAS,MAAwB;AAC/C,QAAI,CAAC,KAAK,QAAQ;AAChB,aAAO;AAAA,IACT;AACA,UAAM,QAAQ,CAAC;AACf,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK,GAAG;AACvC,YAAM,SAAS,SAAS,KAAK,CAAC,CAAC;AAC/B,YAAM,KAAK,IAAI,aAAK,IAAI,IAAI,IAAI,QAAQ,KAAK,CAAC,CAAC,CAAC;AAAA,IAClD;AACA,QAAI,SAAS;AACb,QAAI,OAAQ,MAAM,SAAS,KAAM;AACjC,QAAI,MAAM,MAAM,SAAS;AAEzB,WAAO,MAAM;AACX,UAAI,IAAI;AACR,aAAO,IAAI,OAAO,KAAK,KAAK,GAAG;AAC7B,cAAM,IAAI,KAAK;AACf,cAAM,SAAS,SAAS,OAAO,CAAC,EAAE,MAAM,OAAO,IAAI,CAAC,EAAE,IAAI;AAC1D,cAAM,CAAC,IAAI,IAAI,aAAK,OAAO,CAAC,EAAE,OAAO,OAAO,IAAI,CAAC,EAAE,OAAO,IAAI,QAAQ,EAAE;AAAA,MAC1E;AACA,UAAI,QAAQ,GAAG;AACb,cAAM,CAAC,IAAI,OAAO,KAAK,CAAC;AAAA,MAC1B;AACA,UAAI,SAAS,GAAG;AACd;AAAA,MACF;AACA,YAAM,OAAO;AACb,aAAQ,OAAO,KAAM;AACrB,eAAS;AAAA,IACX;AACA,WAAO,MAAM,CAAC,EAAE;AAAA,EAClB;AAKO,WAAS,SAAS,OAAe,IAAsB;AAC5D,UAAM,QAAkB,CAAC;AACzB,aAAS,OAAO,IAAI,MAAM,MAAM,EAAE,EAAE,QAAQ,QAAQ,IAAI,OAAO,KAAK,MAAM,MAAM,GAAG,EAAE,QAAQ;AAC3F,UAAI,MAAM,GAAG,EAAE,SAAS,MAAM;AAC5B,cAAM,KAAK,MAAM,MAAM,GAAG,EAAE,KAAK,EAAE,IAAI;AAAA,MACzC,OAAO;AACL,cAAM,KAAK,MAAM,MAAM,GAAG,EAAE,IAAI,EAAE,IAAI;AAAA,MACxC;AAAA,IACF;AACA,WAAO;AAAA,EACT;;;AClHO,MAAM,aAAa;AACnB,MAAM,aAAa;AAMnB,WAASC,UAAS,KAAa,MAAgC;AACpE,UAAM,QAAQ,OAAO,OAAO,IAAI,MAAM,CAAC,CAAC,EAAE,OAAO,KAAK,IAAI,EAAE,MAAM,CAAC,CAAC;AACpE,WAAO,CAAC,KAAK,KAAK,GAAG,KAAK;AAAA,EAC5B;AAMO,WAASC,UAAS,MAAc,OAAiC;AACtE,UAAM,QAAQ,OAAO,OAAO,KAAK,MAAM,CAAC,CAAC,EAAE,OAAO,MAAM,MAAM,CAAC,CAAC;AAChE,WAAO,CAAC,KAAK,KAAK,GAAG,KAAK;AAAA,EAC5B;AAKO,WAAS,UAAU,MAAgC;AACxD,UAAM,MAAM,WAAW;AACvB,WAAO,CAAC,KAAK,OAAO,KAAK,MAAM,KAAK,MAAM,EAAE,CAAC,GAAG,KAAK,OAAO,KAAK,MAAM,MAAM,EAAE,CAAC,CAAC;AAAA,EACnF;AAKO,WAAS,UAAU,MAAgC;AACxD,UAAM,MAAM,WAAW;AACvB,WAAO,CAAC,KAAK,OAAO,KAAK,MAAM,KAAK,MAAM,EAAE,CAAC,GAAG,KAAK,OAAO,KAAK,MAAM,MAAM,EAAE,CAAC,CAAC;AAAA,EACnF;AAKO,WAAS,OAAO,MAAuB;AAC5C,WAAO,KAAK,MAAM,GAAG,CAAC,MAAM;AAAA,EAC9B;;;AC5CA,MAAM,2BAAN,MAA+B;AAAA,IAC7B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IAEA,YACE,WACA,uBACA,SACA,cACA,aACA;AACA,WAAK,YAAY;AACjB,WAAK,wBAAwB;AAC7B,WAAK,UAAU;AACf,WAAK,eAAe;AACpB,WAAK,cAAc;AAAA,IACrB;AAAA,EACF;AAEA,MAAO,mCAAQ;;;ACrBf,MAAM,oBAAN,MAAwB;AAAA,IACtB;AAAA,IACA;AAAA,IACA;AAAA,IAEA,YAAY,WAAqB,uBAA+B,aAAqB;AACnF,WAAK,YAAY;AACjB,WAAK,wBAAwB;AAC7B,WAAK,cAAc;AAAA,IACrB;AAAA,EACF;AAEA,MAAO,4BAAQ;;;ACbR,MAAM,OAAO;AAEb,MAAM,aAAa;AASnB,WAAS,gBAAgB,MAAc,UAA0B;AAItE,UAAM,aAAa,KAAK,MAAM,CAAC;AAE/B,UAAM,OAAO,KAAK;AAAA,MAChB,WAAW,MAAM,KAAK,MAAM,WAAW,CAAC,IAAI,GAAG,KAAK,MAAM,WAAW,CAAC,IAAI,IAAI,CAAC;AAAA,IACjF;AAEA,UAAM,OAAO,OAAO,IAAI,IAAK,KAAM,IAAI,IAAK,WAAW;AAGvD,QAAI,OAAO,GAAG;AACZ,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAIO,WAAS,iBAAiB,WAA+B;AAC9D,QAAI,OAAO;AACX,QAAI,QAAQ,UAAU,SAAS;AAC/B,UAAM,oBAA8B;AAEpC,WAAO,OAAO,OAAO;AACnB,OAAC,kBAAkB,IAAI,GAAG,kBAAkB,KAAK,CAAC,IAAI;AAAA,QACpD,kBAAkB,KAAK;AAAA,QACvB,kBAAkB,IAAI;AAAA,MACxB;AACA,cAAQ;AACR,eAAS;AAAA,IACX;AAEA,WAAO;AAAA,EACT;AAMO,WAAS,kBAAkB,OAAe,OAAuB;AACtE,QAAI,QAAQ;AACZ,aAAS,IAAI,GAAG,IAAI,YAAY,KAAK,GAAG;AACtC,UAAI,gBAAgB,OAAO,CAAC,MAAM,gBAAgB,OAAO,CAAC,GAAG;AAC3D,iBAAS;AAAA,MACX,OAAO;AACL;AAAA,MACF;AAAA,IACF;AACA,WAAO;AAAA,EACT;;;ACGO,WAAS,aAAa,OAAoD;AAC/E,UAAM,UAAoB,CAAC;AAC3B,UAAM,qBAA+B,CAAC;AACtC,QAAI;AAEJ,aAAS,IAAI,GAAG,IAAI,MAAM,UAAU,QAAQ,KAAK,GAAG;AAClD,aAAO,MAAM,UAAU,CAAC;AACxB,UAAI,SAAS,MAAM;AACjB,gBAAQ,KAAK,CAAC;AAAA,MAChB,OAAO;AACL,2BAAmB,KAAK,IAAI;AAC5B,gBAAQ,KAAK,CAAC;AAAA,MAChB;AAAA,IACF;AACA,UAAM,iBAAiB,IAAI;AAAA,MACzB;AAAA,MACA,MAAM;AAAA,MACN;AAAA,MACA,MAAM,UAAU;AAAA,MAChB,MAAM;AAAA,IACR;AACA,WAAO;AAAA,EACT;;;AC7EO,MAAM,mBAAN,MAAuB;AAAA,IAC5B;AAAA,IAEA;AAAA,IAEA,cAAc;AACZ,YAAM,KAAe,CAAC;AACtB,WAAK,KAAK;AACV,WAAK,OAAO;AACZ,WAAK,GAAG,KAAK,IAAI,IAAI;AAAA,IACvB;AAAA,IAEA,IAAI,KAAqB;AACvB,aAAO,KAAK,GAAG,GAAG;AAAA,IACpB;AAAA,IAEA,IAAI,KAAa,OAAqB;AACpC,WAAK,GAAG,GAAG,IAAI;AAAA,IACjB;AAAA,IAEA,QAAQ,MAAoB;AAC1B,WAAK,OAAO;AAAA,IACd;AAAA,IAEA,iBAAiB,KAAa,MAAkD;AAC9E,YAAM,YAAsB,CAAC;AAI7B,UAAI,SAAS,MAAM;AACjB,eAAO,CAAC,WAAW,MAAM,IAAI,EAAE;AAAA,MACjC;AAEA,UAAI,cAAc,KAAK,IAAI,IAAI;AAI/B,UAAI,OAAO,WAAW,GAAG;AACvB,eAAO,CAAC,WAAW,MAAM,aAAa,EAAE;AAAA,MAC1C;AAEA,UAAI;AACJ,UAAI;AACJ,UAAI,WAAW;AACf,UAAI,WAAW;AAEf,eAAS,IAAI,GAAG,IAAI,YAAY,KAAK,GAAG;AACtC,SAAC,UAAU,SAAS,IAAI,UAAU,WAAW;AAE7C,YAAI,gBAAgB,KAAK,CAAC,MAAM,GAAG;AACjC,qBAAW;AACX,qBAAW;AAAA,QACb,OAAO;AACL,qBAAW;AACX,qBAAW;AAAA,QACb;AAEA,kBAAU,KAAK,QAAQ;AAGvB,YAAI,aAAa,MAAM;AACrB,wBAAc;AACd;AAAA,QACF;AAEA,sBAAc,KAAK,IAAI,QAAQ;AAG/B,YAAI,OAAO,WAAW,GAAG;AACvB;AAAA,QACF;AAAA,MACF;AAEA,YAAM,cAAc,KAAK,IAAI,QAAQ;AAErC,aAAO,CAAC,iBAAiB,SAAS,GAAG,UAAU,aAAa,WAAW;AAAA,IACzE;AAAA,IAEA,oBACE,KACA,WACA,aACA,aACQ;AAGR,UAAI,gBAAgB,MAAM;AACxB,eAAO,KAAK;AAAA,MACd;AAGA,YAAM,CAAC,UAAU,IAAI,UAAU,WAAW;AAE1C,UAAI,eAAe,KAAK;AACtB,eAAO,KAAK;AAAA,MACd;AAEA,UAAI,cAAc;AAClB,UAAI,cAAc;AAClB,UAAI,WAAW;AACf,UAAI,gBAAgB;AACpB,UAAI,wBAAwB;AAE5B,eAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK,GAAG;AAC5C,YAAI,UAAU,CAAC,MAAM,IAAI;AAEvB;AAAA,QACF;AAEA,mBAAW,UAAU,CAAC;AAEtB,YAAI,gBAAgB,IAAI;AACtB,0BAAgB,KAAK,IAAI,QAAQ;AAEjC,cAAI,OAAO,aAAa,GAAG;AAEzB,0BAAc;AACd,0BAAc;AAEd;AAAA,UACF,OAAO;AAEL,0BAAc;AACd,oCAAwB;AAAA,UAC1B;AAAA,QACF;AAEA,YAAI,CAAC,yBAAyB,aAAa,MAAM;AAI/C;AAAA,QACF,WAAW,CAAC,uBAAuB;AAGjC,kCAAwB;AAAA,QAC1B;AAEA,YAAI,gBAAgB,KAAK,UAAU,SAAS,IAAI,CAAC,MAAM,GAAG;AACxD,WAAC,aAAa,WAAW,IAAIC,UAAS,UAAU,WAAW;AAAA,QAC7D,OAAO;AACL,WAAC,aAAa,WAAW,IAAIA,UAAS,aAAa,QAAQ;AAAA,QAC7D;AACA,aAAK,IAAI,aAAa,WAAW;AACjC,sBAAc;AAAA,MAChB;AAIA,UAAI,gBAAgB,IAAI;AACtB,sBAAc;AAAA,MAChB;AAEA,aAAO;AAAA,IACT;AAAA,IAEA,oBACE,KACA,OACA,WACA,aACA,aACQ;AACR,UAAI;AACJ,UAAI;AAEJ,WAAK,IAAI,KAAK,KAAK,GAAG,KAAK;AAE3B,OAAC,aAAa,WAAW,IAAIC,UAAS,KAAK,KAAK;AAChD,WAAK,IAAI,aAAa,WAAW;AAEjC,oBAAc;AASd,UAAI;AAEJ,UAAI,gBAAgB,MAAM;AACxB,4BAAoB;AAAA,MACtB,OAAO;AACL,cAAM,CAAC,UAAU,IAAI,UAAU,WAAW;AAC1C,4BAAoB,kBAAkB,KAAK,UAAU;AAAA,MACvD;AAEA,UAAI,sBAAsB,YAAY;AACpC,YAAI,gBAAgB,KAAK,iBAAiB,MAAM,GAAG;AACjD,WAAC,aAAa,WAAW,IAAID,UAAS,aAAa,WAAW;AAAA,QAChE,OAAO;AACL,WAAC,aAAa,WAAW,IAAIA,UAAS,aAAa,WAAW;AAAA,QAChE;AACA,aAAK,IAAI,aAAa,WAAW;AACjC,sBAAc;AAAA,MAChB;AAEA,eAAS,IAAI,GAAG,IAAI,YAAY,KAAK,GAAG;AACtC,YAAI;AACJ,cAAM,oBAAoB,aAAa,UAAU;AAOjD,YAAI,IAAI,oBAAoB,KAAK,UAAU,IAAI,iBAAiB,MAAM,IAAI;AACxE,cAAI,sBAAsB,cAAc,oBAAoB,aAAa,IAAI,GAAG;AAC9E,uBAAW;AAAA,UACb,OAAO;AAEL;AAAA,UACF;AAAA,QACF,OAAO;AACL,qBAAW,UAAU,IAAI,iBAAiB;AAAA,QAC5C;AAEA,YAAI,gBAAgB,KAAK,aAAa,IAAI,CAAC,MAAM,GAAG;AAClD,WAAC,aAAa,WAAW,IAAIA,UAAS,UAAU,WAAW;AAAA,QAC7D,OAAO;AACL,WAAC,aAAa,WAAW,IAAIA,UAAS,aAAa,QAAQ;AAAA,QAC7D;AAEA,aAAK,IAAI,aAAa,WAAW;AACjC,sBAAc;AAAA,MAChB;AAEA,aAAO;AAAA,IACT;AAAA,IAEA,OAAO,KAAa,OAAqB;AACvC,YAAM,CAAC,WAAW,aAAa,WAAW,IAAI,KAAK,iBAAiB,KAAK,KAAK,IAAI;AAClF,YAAM,UAAU,KAAK,oBAAoB,KAAK,OAAO,WAAW,aAAa,WAAW;AACxF,WAAK,QAAQ,OAAO;AAAA,IACtB;AAAA,IAEA,OAAO,KAAmB;AACxB,YAAM,CAAC,WAAW,aAAa,WAAW,IAAI,KAAK,iBAAiB,KAAK,KAAK,IAAI;AAClF,YAAM,UAAU,KAAK,oBAAoB,KAAK,WAAW,aAAa,WAAW;AACjF,WAAK,QAAQ,OAAO;AAAA,IACtB;AAAA,IAEA,MAAM,KAAgC;AACpC,YAAM,CAAC,WAAW,UAAU,UAAU,WAAW,IAAI,KAAK,iBAAiB,KAAK,KAAK,IAAI;AAEzF,YAAM,oBAA8B,CAAC;AAErC,eAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK,GAAG;AAC5C,YAAI,UAAU,CAAC,MAAM,IAAI;AACvB,4BAAkB,KAAK,UAAU,CAAC,CAAC;AAAA,QACrC;AAAA,MACF;AAIA,UAAI,wBAAwB;AAC5B,UAAI,aAAa,MAAM;AACrB,cAAM,CAAC,UAAU,IAAI,UAAU,QAAQ;AACvC,YAAI,eAAe,KAAK;AAGtB,kCAAwB;AAAA,QAC1B;AAAA,MACF;AAEA,YAAM,QAAQ,IAAI,0BAAkB,mBAAmB,uBAAuB,WAAW;AACzF,aAAO;AAAA,IACT;AAAA,IAEA,eAAe,KAAuC;AACpD,YAAM,QAAQ,KAAK,MAAM,GAAG;AAC5B,YAAM,iBAAiB,aAAa,KAAK;AACzC,aAAO;AAAA,IACT;AAAA,EACF;","names":["hash","hashLeaf","hashNode","hashNode","hashLeaf"]}