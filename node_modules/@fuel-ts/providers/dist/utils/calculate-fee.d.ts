import type { BN } from '@fuel-ts/math';
import type { Witness } from '@fuel-ts/transactions';
import type { TransactionResultReceipt } from '../transaction-response';
/** @hidden */
export declare const calculatePriceWithFactor: (gasUsed: BN, gasPrice: BN, priceFactor: BN) => BN;
/** @hidden */
export declare const getGasUsedFromReceipts: (receipts: Array<TransactionResultReceipt>) => BN;
/** @hidden */
export interface CalculateTxChargeableBytesParams {
    transactionBytes: Uint8Array;
    transactionWitnesses?: Witness[];
}
/** @hidden */
export declare const calculateTxChargeableBytes: (params: CalculateTxChargeableBytesParams) => BN;
export interface CalculateTransactionFeeParams {
    gasUsed: BN;
    gasPrice: BN;
    gasLimit: BN;
    gasPerByte: BN;
    gasPriceFactor: BN;
    chargeableBytes: BN;
}
/** @hidden */
export declare const calculateTransactionFee: ({ gasPrice, gasUsed, gasLimit, gasPerByte, gasPriceFactor, chargeableBytes, }: CalculateTransactionFeeParams) => {
    minFee: BN;
    maxFee: BN;
    minGasToPay: BN;
    maxGasToPay: BN;
    feeFromGasUsed: BN;
};
//# sourceMappingURL=calculate-fee.d.ts.map