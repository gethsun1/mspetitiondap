{"version":3,"sources":["../src/cli.ts","../src/lib/colorizeUserVersion.ts","../src/lib/compareSystemVersions.ts","../src/lib/getBuiltinVersions.ts","../src/lib/fuelUpLink.ts","../src/lib/getSystemVersions.ts"],"sourcesContent":["import { bold, green } from 'chalk';\nimport CliTable from 'cli-table';\n\nimport { colorizeUserVersion } from './lib/colorizeUserVersion';\nimport { compareSystemVersions } from './lib/compareSystemVersions';\nimport { fuelUpLink } from './lib/fuelUpLink';\nimport { getBuiltinVersions } from './lib/getBuiltinVersions';\nimport { getSystemVersions } from './lib/getSystemVersions';\n\nexport * from './lib/compareSystemVersions';\nexport * from './lib/fuelUpLink';\nexport * from './lib/getSystemVersions';\n\nexport function runVersions() {\n  const { error, info } = console;\n\n  const supportedVersions = getBuiltinVersions();\n\n  const cliTable = new CliTable({\n    head: ['', bold('Supported'), bold(`Yours / System`)],\n  });\n\n  const { systemForcVersion, systemFuelCoreVersion } = getSystemVersions();\n\n  const comparisons = compareSystemVersions({\n    systemForcVersion,\n    systemFuelCoreVersion,\n  });\n\n  const userForcColorized = colorizeUserVersion({\n    version: systemForcVersion,\n    isGt: comparisons.systemForcIsGt,\n    isOk: comparisons.systemForcIsEq,\n  });\n\n  const userFuelCoreColorized = colorizeUserVersion({\n    version: systemFuelCoreVersion,\n    isGt: comparisons.systemFuelCoreIsGt,\n    isOk: comparisons.systemFuelCoreIsEq,\n  });\n\n  cliTable.push(['Forc', supportedVersions.FORC, userForcColorized]);\n  cliTable.push(['Fuel-Core', supportedVersions.FUEL_CORE, userFuelCoreColorized]);\n\n  const someIsGt = comparisons.systemForcIsGt || comparisons.systemFuelCoreIsGt;\n  const bothAreExact = comparisons.systemForcIsEq && comparisons.systemFuelCoreIsEq;\n\n  if (someIsGt) {\n    info(`Your system's components are newer than the ones supported!`);\n    info(cliTable.toString());\n    process.exit(0);\n  } else if (bothAreExact) {\n    info(`You have all the right versions! ⚡`);\n    info(cliTable.toString());\n    process.exit(0);\n  } else {\n    error(`You're using outdated versions — update them with:`);\n    error(`  ${green(fuelUpLink)}`);\n    error(cliTable.toString());\n    process.exit(1);\n  }\n}\n","import { cyan, green, red } from 'chalk';\n\nexport interface IColorizeUserVersion {\n  version: string;\n  isGt: boolean;\n  isOk: boolean;\n}\n\nexport const colorizeUserVersion = (params: IColorizeUserVersion) => {\n  const { version, isGt, isOk } = params;\n\n  if (isGt) {\n    return cyan(version);\n  }\n\n  if (isOk) {\n    return green(version);\n  }\n\n  return red(version);\n};\n","import semver from 'semver';\n\nimport { getBuiltinVersions } from './getBuiltinVersions';\n\nexport interface ICompareVersionsParams {\n  systemForcVersion: string;\n  systemFuelCoreVersion: string;\n}\n\nexport function compareSystemVersions(params: ICompareVersionsParams) {\n  const { systemForcVersion, systemFuelCoreVersion } = params;\n\n  const versions = getBuiltinVersions();\n\n  // are user's versions GREATER than the ones supported by the SDK?\n  const systemForcIsGt = semver.gt(systemForcVersion, versions.FORC);\n  const systemFuelCoreIsGt = semver.gt(systemFuelCoreVersion, versions.FUEL_CORE);\n\n  // are user's versions EXACTLY the ones supported by the SDK?\n  const systemForcIsEq = semver.eq(systemForcVersion, versions.FORC);\n  const systemFuelCoreIsEq = semver.eq(systemFuelCoreVersion, versions.FUEL_CORE);\n\n  return {\n    systemForcIsGt,\n    systemFuelCoreIsGt,\n    systemForcIsEq,\n    systemFuelCoreIsEq,\n  };\n}\n","export function getBuiltinVersions() {\n  return {\n    FORC: '0.46.1',\n    FUEL_CORE: '0.20.8',\n    FUELS: '0.69.1',\n  };\n}\n","export const fuelUpLink = 'https://github.com/fuellabs/fuelup';\n","import { green } from 'chalk';\nimport { execSync } from 'child_process';\n\nimport { fuelUpLink } from './fuelUpLink';\n\nconst stdio = 'ignore';\n\nexport function getSystemForc() {\n  let systemForcVersion: string | null = null;\n  let error: Error | null = null;\n\n  try {\n    const reg = /[^0-9.]+/g;\n    systemForcVersion = execSync('forc --version', { stdio }).toString().replace(reg, '');\n  } catch (err: unknown) {\n    error = err as Error;\n  }\n\n  return {\n    error,\n    systemForcVersion,\n  };\n}\n\nexport function getSystemFuelCore() {\n  let systemFuelCoreVersion: string | null = null;\n  let error: Error | null = null;\n\n  try {\n    const reg = /[^0-9.]+/g;\n    systemFuelCoreVersion = execSync('fuel-core --version', { stdio }).toString().replace(reg, '');\n  } catch (err: unknown) {\n    error = err as Error;\n  }\n\n  return {\n    error,\n    systemFuelCoreVersion,\n  };\n}\n\nexport function getSystemVersions() {\n  const { error } = console;\n\n  const { error: errorForc, systemForcVersion } = getSystemForc();\n  const { error: errorCore, systemFuelCoreVersion } = getSystemFuelCore();\n\n  const err = errorForc ?? errorCore;\n\n  if (err) {\n    error('Make sure you have Forc and Fuel-Core installed.');\n    error(`  ${green(fuelUpLink)}`);\n    throw err;\n  }\n\n  return {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    systemForcVersion: systemForcVersion!,\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    systemFuelCoreVersion: systemFuelCoreVersion!,\n  };\n}\n"],"mappings":"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","names":["green","green","green","green"]}