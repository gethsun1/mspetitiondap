{"version":3,"sources":["../src/index.ts","../src/lib/getBuiltinVersions.ts","../src/lib/checkFuelCoreVersionCompatibility.ts"],"sourcesContent":["/*\n  1) Variables\n  ------------\n    `FUELS` — comes from `/packages/fuels/package.json`\n    `FUEL_CORE` — comes from `/packages/fuel-core/VERSION`\n    `FORC` — comes from `/packages/forc/VERSION`\n\n  3) Pre Build\n  ------------\n    There's a `prebuild` script in:\n     - packages/versions/package.json\n\n    Before build, it will call this file:\n      - packages/versions/scripts/replaceVersions.ts\n\n    Which will replace static versions at:\n      - packages/versions/src/lib/getBuiltinVersions.ts\n\n    If no env variables are set, it uses the current versions\n    from the original locations mentioned in the 1st step.\n\n  3)  CI\n  ------------\n    As part of the CI release (1) routine, the changes made\n    to the versions package by the `prebuild` routine will\n    be committed by the same script (2) that handles the\n    docs versioning.\n\n      - (1) <repoRoot>/.github/workflows/release.yaml\n      - (2) <repoRoot>/changeset-version-with-docs.ts\n\n  4) Build\n  ------------\n    By the time we get to the `build` step, everything is in\n    place already and ready to be built and released.\n*/\n\nimport { getBuiltinVersions } from './lib/getBuiltinVersions';\n\nexport const versions = getBuiltinVersions();\n\nexport * from './lib/checkFuelCoreVersionCompatibility';\n","export function getBuiltinVersions() {\n  return {\n    FORC: '0.46.1',\n    FUEL_CORE: '0.20.8',\n    FUELS: '0.69.1',\n  };\n}\n","import semver from 'semver';\n\nimport { getBuiltinVersions } from './getBuiltinVersions';\n\nexport function checkFuelCoreVersionCompatibility(networkVersion: string) {\n  const { FUEL_CORE: supportedVersion } = getBuiltinVersions();\n\n  const networkMajor = semver.major(networkVersion);\n  const networkMinor = semver.minor(networkVersion);\n  const networkPatch = semver.patch(networkVersion);\n\n  const supportedMajor = semver.major(supportedVersion);\n  const supportedMinor = semver.minor(supportedVersion);\n  const supportedPatch = semver.patch(supportedVersion);\n\n  return {\n    supportedVersion,\n    isMajorSupported: networkMajor === supportedMajor,\n    isMinorSupported: networkMinor === supportedMinor,\n    isPatchSupported: networkPatch === supportedPatch,\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAO,SAAS,qBAAqB;AACnC,SAAO;AAAA,IACL,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,EACT;AACF;;;ACNA,oBAAmB;AAIZ,SAAS,kCAAkC,gBAAwB;AACxE,QAAM,EAAE,WAAW,iBAAiB,IAAI,mBAAmB;AAE3D,QAAM,eAAe,cAAAA,QAAO,MAAM,cAAc;AAChD,QAAM,eAAe,cAAAA,QAAO,MAAM,cAAc;AAChD,QAAM,eAAe,cAAAA,QAAO,MAAM,cAAc;AAEhD,QAAM,iBAAiB,cAAAA,QAAO,MAAM,gBAAgB;AACpD,QAAM,iBAAiB,cAAAA,QAAO,MAAM,gBAAgB;AACpD,QAAM,iBAAiB,cAAAA,QAAO,MAAM,gBAAgB;AAEpD,SAAO;AAAA,IACL;AAAA,IACA,kBAAkB,iBAAiB;AAAA,IACnC,kBAAkB,iBAAiB;AAAA,IACnC,kBAAkB,iBAAiB;AAAA,EACrC;AACF;;;AFkBO,IAAM,WAAW,mBAAmB;","names":["semver"]}