{"version":3,"sources":["../src/cli.ts","../src/cli/utils/logger.ts","../src/cli/config/forcUtils.ts","../src/cli/commands/deploy/createWallet.ts","../src/cli/commands/deploy/deployContract.ts","../src/cli/commands/deploy/getDeployConfig.ts","../src/cli/commands/deploy/saveContractIds.ts","../src/cli/commands/deploy/index.ts","../src/cli/commands/dev/startFuelCore.ts","../src/cli/utils/findBinPath.ts","../src/cli/utils/getBinarySource.ts","../src/cli/commands/dev/defaultChainConfig.ts","../src/cli/commands/build/buildSwayPrograms.ts","../src/cli/commands/build/generateTypes.ts","../src/cli/templates/index.ts","../src/cli/commands/build/index.ts","../src/cli/commands/dev/index.ts","../src/cli/config/loadConfig.ts","../src/cli/commands/init/shouldUseBuiltinForc.ts","../src/cli/commands/init/shouldUseBuiltinFuelCore.ts","../src/cli/config/validateConfig.ts","../src/cli/commands/withConfig.ts","../src/cli/commands/init/index.ts","../src/cli/templates/fuels.config.ts","../src/cli/commands/withProgram.ts","../src/bin.ts"],"sourcesContent":["import { configureCliOptions as configureTypegenCliOptions } from '@fuel-ts/abi-typegen/cli';\nimport { versions } from '@fuel-ts/versions';\nimport { runVersions } from '@fuel-ts/versions/cli';\nimport { Command, Option } from 'commander';\n\nimport { build } from './cli/commands/build';\nimport { deploy } from './cli/commands/deploy';\nimport { dev } from './cli/commands/dev';\nimport { init } from './cli/commands/init';\nimport { withConfig } from './cli/commands/withConfig';\nimport { withProgram } from './cli/commands/withProgram';\nimport { Commands } from './cli/types';\nimport { findBinPath } from './cli/utils/findBinPath';\nimport { configureLogging } from './cli/utils/logger';\n\nexport const onPreAction = (command: Command) => {\n  const opts = command.opts();\n  configureLogging({\n    isDebugEnabled: opts.debug,\n    isLoggingEnabled: !opts.silent,\n  });\n};\n\nexport const configureCli = () => {\n  const program = new Command();\n\n  program.name('fuels');\n\n  program.option('-D, --debug', 'Enables verbose logging', false);\n  program.option('-S, --silent', 'Omit output messages', false);\n\n  program.version(versions.FUELS, '-v, --version', 'Output the version number');\n  program.helpOption('-h, --help', 'Display help');\n  program.addHelpCommand('help [command]', 'Display help for command');\n\n  program.enablePositionalOptions(true);\n\n  program.hook('preAction', onPreAction);\n\n  /**\n   * Defining local commands\n   */\n\n  const pathOption = new Option('-p, --path <path>', 'Path to project root').default(process.cwd());\n\n  let command: Command;\n\n  const desc = `Relative path/globals to `;\n  const arg = `<path|global>`;\n\n  (command = program.command(Commands.init))\n    .description('Create a sample `fuel.config.ts` file')\n    .addOption(pathOption)\n    .option('-w, --workspace <path>', 'Relative dir path to Forc workspace')\n    .addOption(new Option(`-c, --contracts ${arg}`, `${desc} Contracts`).conflicts('workspace'))\n    .addOption(new Option(`-s, --scripts ${arg}`, `${desc} Scripts`).conflicts('workspace'))\n    .addOption(new Option(`-p, --predicates ${arg}`, `${desc} Predicates`).conflicts('workspace'))\n    .requiredOption('-o, --output <path>', 'Relative dir path for Typescript generation output')\n    .option('--use-builtin-forc', 'Use buit-in `forc` to build Sway programs')\n    .option('--use-builtin-fuel-core', 'Use buit-in `fuel-core` when starting a Fuel node')\n    .option('--auto-start-fuel-core', 'Auto-starts a `fuel-core` node during `dev` command')\n    .action(withProgram(command, Commands.init, init));\n\n  (command = program.command(Commands.dev))\n    .description('Start a Fuel node and run build + deploy on every file change')\n    .addOption(pathOption)\n    .action(withConfig(command, Commands.dev, dev));\n\n  (command = program.command(Commands.build))\n    .description('Build Sway programs and generate Typescript for them')\n    .addOption(pathOption)\n    .option(\n      '-d, --deploy',\n      'Deploy contracts after build (auto-starts a `fuel-core` node if needed)'\n    )\n    .action(withConfig(command, Commands.build, build));\n\n  (command = program.command(Commands.deploy))\n    .description('Deploy contracts to the Fuel network')\n    .addOption(pathOption)\n    .action(withConfig(command, Commands.deploy, deploy));\n\n  /**\n   * Routing external commands from sub-packages' CLIs\n   */\n\n  // Typegen\n  configureTypegenCliOptions(\n    program.command('typegen').description(`Generate Typescript from Sway ABI JSON files`)\n  );\n\n  // Versions\n  program\n    .command('versions')\n    .description('Check for version incompatibilities')\n    .action(runVersions);\n\n  /**\n   * Binary wrappers\n   */\n\n  program.command('core', 'Wrapper around Fuel Core binary', {\n    executableFile: findBinPath('fuels-core'),\n  });\n\n  program.command('forc', 'Wrapper around Forc binary', {\n    executableFile: findBinPath('fuels-forc'),\n  });\n\n  return program;\n};\n\nexport const run = async (argv: string[]) => {\n  const program = configureCli();\n  return program.parseAsync(argv);\n};\n","import chalk from 'chalk';\n\nexport const loggingConfig = {\n  isDebugEnabled: false,\n  isLoggingEnabled: true,\n};\n\nexport function configureLogging(params: { isDebugEnabled: boolean; isLoggingEnabled: boolean }) {\n  loggingConfig.isLoggingEnabled = params.isLoggingEnabled;\n  loggingConfig.isDebugEnabled = params.isDebugEnabled && loggingConfig.isLoggingEnabled;\n}\n\nexport function log(...data: unknown[]) {\n  if (loggingConfig.isLoggingEnabled) {\n    process.stdout.write(`${data.join(' ')}\\n`);\n  }\n}\n\nexport function debug(...data: unknown[]) {\n  if (loggingConfig.isDebugEnabled) {\n    log(data);\n  }\n}\n\nexport function error(...data: unknown[]) {\n  process.stderr.write(`${chalk.red(data.join(' '))}\\n`);\n}\n\nexport function warn(...data: unknown[]) {\n  log(`${chalk.yellow(data.join(' '))}\\n`);\n}\n","import { readFileSync, existsSync } from 'fs';\nimport camelCase from 'lodash.camelcase';\nimport { join } from 'path';\nimport toml from 'toml';\n\nexport type ForcToml = {\n  project: {\n    authors?: string[];\n    entry: string;\n    license: string;\n    name: string;\n  };\n  workspace: {\n    members: string[];\n  };\n  dependencies: {\n    [key: string]: string;\n  };\n};\n\nexport enum SwayType {\n  contract = 'contract',\n  script = 'script',\n  predicate = 'predicate',\n}\n\nexport const forcFiles = new Map<string, ForcToml>();\n\nexport const swayFiles = new Map<string, SwayType>();\n\nexport function readForcToml(path: string) {\n  const forcPath = join(path, './Forc.toml');\n\n  if (!existsSync(forcPath)) {\n    throw new Error(`Toml file not found:\\n  ${forcPath}`);\n  }\n\n  if (!forcFiles.has(forcPath)) {\n    const forcFile = readFileSync(forcPath, 'utf8');\n    const tomlParsed = toml.parse(forcFile);\n    forcFiles.set(forcPath, tomlParsed);\n  }\n\n  const tomlContents = forcFiles.get(forcPath) as ForcToml;\n\n  return tomlContents;\n}\n\nexport function readSwayType(path: string) {\n  const forcToml = readForcToml(path);\n  const entryFile = forcToml.project.entry || 'main.sw';\n  const swayEntryPath = join(path, 'src', entryFile);\n\n  if (!swayFiles.has(swayEntryPath)) {\n    const swayFile = readFileSync(swayEntryPath, 'utf8');\n    const [swayType] = swayFile.split(';\\n');\n    swayFiles.set(swayEntryPath, swayType as SwayType);\n  }\n\n  return swayFiles.get(swayEntryPath) as SwayType;\n}\n\nexport function getContractName(contractPath: string) {\n  const { project } = readForcToml(contractPath);\n  return project.name;\n}\n\nexport function getContractCamelCase(contractPath: string) {\n  const projectName = getContractName(contractPath);\n  return camelCase(projectName);\n}\n\nexport function getBinaryPath(contractPath: string) {\n  const projectName = getContractName(contractPath);\n  return join(contractPath, `/out/debug/${projectName}.bin`);\n}\n\nexport function getABIPath(contractPath: string) {\n  const projectName = getContractName(contractPath);\n  return join(contractPath, `/out/debug/${projectName}-abi.json`);\n}\n\nexport function getABIPaths(paths: string[]) {\n  return Promise.all(paths.map((path) => getABIPath(path)));\n}\n\nexport const getStorageSlotsPath = (contractPath: string) => {\n  const projectName = getContractName(contractPath);\n  return join(contractPath, `/out/debug/${projectName}-storage_slots.json`);\n};\n","import { Provider } from '@fuel-ts/providers';\nimport { Wallet } from '@fuel-ts/wallet';\n\nexport async function createWallet(providerUrl: string, privateKey?: string) {\n  let pvtKey: string;\n\n  if (privateKey) {\n    pvtKey = privateKey;\n  } else if (process.env.PRIVATE_KEY) {\n    pvtKey = process.env.PRIVATE_KEY;\n  } else {\n    throw new Error('You must provide a privateKey via config.privateKey or env PRIVATE_KEY');\n  }\n\n  const provider = await Provider.create(providerUrl);\n\n  return Wallet.fromPrivateKey(pvtKey, provider);\n}\n","import { ContractFactory } from '@fuel-ts/contract';\nimport type { DeployContractOptions } from '@fuel-ts/contract';\nimport type { WalletUnlocked } from '@fuel-ts/wallet';\nimport { existsSync, readFileSync } from 'fs';\n\nimport { debug } from '../../utils/logger';\n\nexport async function deployContract(\n  wallet: WalletUnlocked,\n  binaryPath: string,\n  abiPath: string,\n  storageSlotsPath: string,\n  deployConfig: DeployContractOptions\n) {\n  debug(`Deploying contract for ABI: ${abiPath}`);\n\n  const bytecode = readFileSync(binaryPath);\n\n  if (existsSync(storageSlotsPath)) {\n    const storageSlots = JSON.parse(readFileSync(storageSlotsPath, 'utf-8'));\n    // eslint-disable-next-line no-param-reassign\n    deployConfig.storageSlots = storageSlots;\n  }\n\n  const { minGasPrice: gasPrice } = wallet.provider.getGasConfig();\n\n  const abi = JSON.parse(readFileSync(abiPath, 'utf-8'));\n  const contractFactory = new ContractFactory(bytecode, abi, wallet);\n\n  // eslint-disable-next-line no-param-reassign\n  deployConfig.gasPrice = deployConfig.gasPrice ?? gasPrice;\n\n  const contract = await contractFactory.deployContract(deployConfig);\n  return contract.id.toB256();\n}\n","import type { DeployContractOptions } from '@fuel-ts/contract';\n\nimport type { ContractDeployOptions, OptionsFunction } from '../../types';\n\nexport async function getDeployConfig(\n  deployConfig: DeployContractOptions | OptionsFunction,\n  options: ContractDeployOptions\n) {\n  let config: DeployContractOptions;\n\n  if (typeof deployConfig === 'function') {\n    config = await deployConfig(options);\n  } else {\n    config = deployConfig;\n  }\n\n  return config;\n}\n","import { writeFile, mkdir } from 'fs/promises';\nimport { resolve } from 'path';\n\nimport type { DeployedContract } from '../../types';\nimport { log } from '../../utils/logger';\n\nexport async function saveContractIds(contracts: DeployedContract[], output: string) {\n  const contractsMap = contracts.reduce(\n    (cConfig, { name, contractId }) => ({\n      ...cConfig,\n      [name]: contractId,\n    }),\n    {}\n  );\n\n  const filePath = resolve(output, 'contract-ids.json');\n\n  await mkdir(output, { recursive: true });\n  await writeFile(filePath, JSON.stringify(contractsMap, null, 2));\n\n  log(`Contract IDs saved at: ${filePath}`);\n}\n","import {\n  getBinaryPath,\n  getABIPath,\n  getContractName,\n  getContractCamelCase,\n  getStorageSlotsPath,\n} from '../../config/forcUtils';\nimport type { FuelsConfig, DeployedContract } from '../../types';\nimport { debug, log } from '../../utils/logger';\n\nimport { createWallet } from './createWallet';\nimport { deployContract } from './deployContract';\nimport { getDeployConfig } from './getDeployConfig';\nimport { saveContractIds } from './saveContractIds';\n\nexport async function deploy(config: FuelsConfig) {\n  const contracts: DeployedContract[] = [];\n\n  const wallet = await createWallet(config.providerUrl, config.privateKey);\n\n  log(`Deploying contracts to: ${wallet.provider.url}`);\n\n  const contractsLen = config.contracts.length;\n\n  for (let i = 0; i < contractsLen; i++) {\n    const contractPath = config.contracts[i];\n    const binaryPath = getBinaryPath(contractPath);\n    const abiPath = getABIPath(contractPath);\n    const storageSlotsPath = getStorageSlotsPath(contractPath);\n    const projectName = getContractName(contractPath);\n    const contractName = getContractCamelCase(contractPath);\n    const deployConfig = await getDeployConfig(config.deployConfig, {\n      contracts: Array.from(contracts),\n      contractName,\n      contractPath,\n    });\n\n    const contractId = await deployContract(\n      wallet,\n      binaryPath,\n      abiPath,\n      storageSlotsPath,\n      deployConfig\n    );\n\n    debug(`Contract deployed: ${projectName} - ${contractId}`);\n\n    contracts.push({\n      name: contractName,\n      contractId,\n    });\n  }\n\n  await saveContractIds(contracts, config.output);\n\n  return contracts;\n}\n","import type { ChildProcessWithoutNullStreams } from 'child_process';\nimport { spawn } from 'child_process';\nimport { mkdirSync, writeFileSync } from 'fs';\nimport { dirname, join } from 'path';\nimport { getPortPromise } from 'portfinder';\nimport treeKill from 'tree-kill';\n\nimport type { FuelsConfig } from '../../types';\nimport { findBinPath } from '../../utils/findBinPath';\nimport { getBinarySource } from '../../utils/getBinarySource';\nimport { error, log, loggingConfig } from '../../utils/logger';\n\nimport { defaultChainConfig, defaultConsensusKey } from './defaultChainConfig';\n\nexport type FuelCoreNode = {\n  bindIp: string;\n  accessIp: string;\n  port: number;\n  providerUrl: string;\n  chainConfig: string;\n  killChildProcess: () => void;\n};\n\nexport type KillNodeParams = {\n  core: ChildProcessWithoutNullStreams;\n  killFn: (pid: number) => void;\n  state: {\n    isDead: boolean;\n  };\n};\n\nexport const killNode = (params: KillNodeParams) => () => {\n  const { core, state, killFn } = params;\n  if (core.pid && !state.isDead) {\n    state.isDead = true;\n    killFn(Number(core.pid));\n  }\n};\n\nexport const createTempChainConfig = (coreDir: string) => {\n  const chainConfigPath = join(coreDir, 'chainConfig.json');\n  const chainConfigJson = JSON.stringify(defaultChainConfig, null, 2);\n  mkdirSync(dirname(chainConfigPath), { recursive: true });\n  writeFileSync(chainConfigPath, chainConfigJson);\n  return chainConfigPath;\n};\n\nexport const startFuelCore = async (config: FuelsConfig): Promise<FuelCoreNode> => {\n  log(`Starting ${getBinarySource(config.useBuiltinFuelCore)} 'fuel-core' node..`);\n\n  const coreDir = join(config.basePath, '.fuels');\n\n  const bindIp = '0.0.0.0';\n  const accessIp = '127.0.0.1';\n\n  const chainConfig = config.chainConfig ?? createTempChainConfig(coreDir);\n  const port = config.fuelCorePort ?? (await getPortPromise({ port: 4000 }));\n\n  const providerUrl = `http://${accessIp}:${port}/graphql`;\n\n  const flags = [\n    'run',\n    ['--ip', bindIp],\n    ['--port', port.toString()],\n    ['--db-path', coreDir],\n    ['--min-gas-price', '0'],\n    ['--poa-instant', 'true'],\n    ['--consensus-key', defaultConsensusKey],\n    ['--chain', chainConfig],\n    '--vm-backtrace',\n    '--utxo-validation',\n    '--manual_blocks_enabled',\n  ].flat();\n\n  return new Promise((resolve, reject) => {\n    const builtInFuelsCorePath = findBinPath('fuels-core');\n\n    const command = config.useBuiltinFuelCore ? builtInFuelsCorePath : 'fuel-core';\n    const core = spawn(command, flags, { stdio: 'pipe' });\n\n    if (loggingConfig.isLoggingEnabled) {\n      core.stderr.pipe(process.stderr);\n    }\n\n    if (loggingConfig.isDebugEnabled) {\n      core.stdout.pipe(process.stdout);\n    }\n\n    const state = { isDead: false };\n    const killChildProcess = killNode({ core, state, killFn: treeKill });\n\n    process.on('beforeExit', killChildProcess);\n    process.on('uncaughtException', killChildProcess);\n\n    core.stderr?.on('data', (data) => {\n      if (/Binding GraphQL provider to/.test(data)) {\n        resolve({\n          bindIp,\n          accessIp,\n          port,\n          providerUrl,\n          killChildProcess,\n          chainConfig,\n        });\n      }\n      if (/error/i.test(data)) {\n        error(\n          `Some error occurred. Please, check to see if you have another instance running locally.`\n        );\n        reject(data.toString());\n      }\n    });\n\n    core.on('error', reject);\n  });\n};\n\nexport const autoStartFuelCore = async (config: FuelsConfig) => {\n  let fuelCore: FuelCoreNode | undefined;\n\n  if (config.autoStartFuelCore) {\n    fuelCore = await startFuelCore(config);\n    // eslint-disable-next-line no-param-reassign\n    config.providerUrl = fuelCore.providerUrl;\n    // eslint-disable-next-line no-param-reassign\n    config.privateKey = defaultConsensusKey;\n  }\n\n  return fuelCore;\n};\n","import { existsSync } from 'fs';\nimport { join } from 'path';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst npmWhich = require('npm-which')(__dirname);\n\nexport function findBinPath(binCommandName: string) {\n  let binPath = npmWhich.sync(binCommandName);\n\n  if (!existsSync(binPath)) {\n    // The user might be using bun, which has a different structure for binaries inside node_modules\n    binPath = join('node_modules', '.bin', binCommandName);\n  }\n\n  return binPath;\n}\n","import chalk from 'chalk';\n\nexport const getBinarySource = (useBuiltIn: boolean) =>\n  ({\n    true: chalk.cyan('built-in'),\n    false: chalk.green('source'),\n  })[`${useBuiltIn}`];\n","/**\n * This is the `privateKey` of the `consensus.PoA.signing_key` below.\n * This key is responsible for validating the transactions.\n */\nexport const defaultConsensusKey =\n  '0xa449b1ffee0e2205fa924c6740cc48b3b473aa28587df6dab12abc245d1f5298';\n\nexport const defaultChainConfig = {\n  chain_name: 'local_testnet',\n  block_gas_limit: 5000000000,\n  initial_state: {\n    coins: [\n      {\n        owner: '0x94ffcc53b892684acefaebc8a3d4a595e528a8cf664eeb3ef36f1020b0809d0d',\n        amount: '0xFFFFFFFFFFFFFFFF',\n        asset_id: '0x0000000000000000000000000000000000000000000000000000000000000000',\n      },\n      {\n        owner: '0x09c0b2d1a486c439a87bcba6b46a7a1a23f3897cc83a94521a96da5c23bc58db',\n        amount: '0xFFFFFFFFFFFFFFFF',\n        asset_id: '0x0000000000000000000000000000000000000000000000000000000000000000',\n      },\n      {\n        owner: '0x5d99ee966b42cd8fc7bdd1364b389153a9e78b42b7d4a691470674e817888d4e',\n        amount: '0xFFFFFFFFFFFFFFFF',\n        asset_id: '0x0000000000000000000000000000000000000000000000000000000000000000',\n      },\n      {\n        owner: '0xbdaad6a89e073e177895b3e5a9ccd15806749eda134a6438dae32fc5b6601f3f',\n        amount: '0xFFFFFFFFFFFFFFFF',\n        asset_id: '0x0000000000000000000000000000000000000000000000000000000000000000',\n      },\n      {\n        owner: '0x95a7aa6cc32743f8706c40ef49a7423b47da763bb4bbc055b1f07254dc729036',\n        amount: '0xFFFFFFFFFFFFFFFF',\n        asset_id: '0x0000000000000000000000000000000000000000000000000000000000000000',\n      },\n      {\n        owner: '0xcee104acd38b940c8f1c62c6d7ea00a0ad2241d6dee0509a4bf27297508870d3',\n        amount: '0xFFFFFFFFFFFFFFFF',\n        asset_id: '0x0000000000000000000000000000000000000000000000000000000000000000',\n      },\n      {\n        owner: '0x7e3626e306588eba79cafab73f0709e55ab8f4bdfe8c8b75034a430fc56ece89',\n        amount: '0xFFFFFFFFFFFFFFFF',\n        asset_id: '0x0000000000000000000000000000000000000000000000000000000000000000',\n      },\n      {\n        owner: '0x1c31df52b6df56407dd95f83082e8beb9cfc9532ac111d5bd8491651d95ba775',\n        amount: '0xFFFFFFFFFFFFFFFF',\n        asset_id: '0x0000000000000000000000000000000000000000000000000000000000000000',\n      },\n      {\n        owner: '0x09dd7a49174d6fcc9f4c6f7942c18060a935ddd03ee69b594189b8c3581276ea',\n        amount: '0xFFFFFFFFFFFFFFFF',\n        asset_id: '0x0000000000000000000000000000000000000000000000000000000000000000',\n      },\n      {\n        owner: '0x86604282dc604481b809845be49667607c470644f6822fc01eb0d22f167e08cf',\n        amount: '0xFFFFFFFFFFFFFFFF',\n        asset_id: '0x0000000000000000000000000000000000000000000000000000000000000000',\n      },\n    ],\n    messages: [\n      {\n        sender: '0xc43454aa38dd91f88109a4b7aef5efb96ce34e3f24992fe0f81d233ca686f80f',\n        recipient: '0x69a2b736b60159b43bb8a4f98c0589f6da5fa3a3d101e8e269c499eb942753ba',\n        nonce: '0101010101010101010101010101010101010101010101010101010101010101',\n        amount: '0x000000000000FFFF',\n        data: '',\n        da_height: '0x00',\n      },\n      {\n        sender: '0x69a2b736b60159b43bb8a4f98c0589f6da5fa3a3d101e8e269c499eb942753ba',\n        recipient: '0xc43454aa38dd91f88109a4b7aef5efb96ce34e3f24992fe0f81d233ca686f80f',\n        nonce: '0e1ef2963832068b0e1ef2963832068b0e1ef2963832068b0e1ef2963832068b',\n        amount: '0xb04f3c08f59b309e',\n        data: '',\n        da_height: '0x00',\n      },\n    ],\n  },\n  transaction_parameters: {\n    contract_max_size: 16777216,\n    max_inputs: 255,\n    max_outputs: 255,\n    max_witnesses: 255,\n    max_gas_per_tx: 500000000,\n    max_script_length: 1048576,\n    max_script_data_length: 1048576,\n    max_static_contracts: 255,\n    max_storage_slots: 255,\n    max_predicate_length: 1048576,\n    max_predicate_data_length: 1048576,\n    max_gas_per_predicate: 100000000,\n    gas_price_factor: 1000000000,\n    gas_per_byte: 4,\n    max_message_data_length: 1048576,\n  },\n  gas_costs: {\n    add: 1,\n    addi: 1,\n    aloc: 1,\n    and: 1,\n    andi: 1,\n    bal: 21,\n    bhei: 1,\n    bhsh: 1,\n    burn: 35,\n    cb: 2,\n    cfei: 1,\n    cfsi: 1,\n    croo: 28,\n    div: 1,\n    divi: 1,\n    ecr: 1703,\n    eq: 1,\n    exp: 1,\n    expi: 1,\n    flag: 1,\n    gm: 1,\n    gt: 1,\n    gtf: 1,\n    ji: 1,\n    jmp: 1,\n    jne: 1,\n    jnei: 1,\n    jnzi: 1,\n    k256: 19,\n    lb: 1,\n    log: 40,\n    lt: 1,\n    lw: 1,\n    mcpi: 3,\n    mint: 35,\n    mlog: 1,\n    mod: 1,\n    modi: 1,\n    move: 1,\n    movi: 1,\n    mroo: 2,\n    mul: 1,\n    muli: 1,\n    noop: 1,\n    not: 1,\n    or: 1,\n    ori: 1,\n    ret_contract: 61,\n    rvrt_contract: 61,\n    s256: 5,\n    sb: 1,\n    scwq: 11,\n    sll: 1,\n    slli: 1,\n    srl: 1,\n    srli: 1,\n    srw: 23,\n    sub: 1,\n    subi: 1,\n    sw: 1,\n    sww: 79,\n    swwq: 72,\n    time: 1,\n    tr: 120,\n    tro: 99,\n    xor: 1,\n    xori: 1,\n    call: {\n      base: 116,\n      dep_per_unit: 14,\n    },\n    ccp: {\n      base: 24,\n      dep_per_unit: 13,\n    },\n    csiz: {\n      base: 17,\n      dep_per_unit: 15,\n    },\n    ldc: {\n      base: 23,\n      dep_per_unit: 14,\n    },\n    logd: {\n      base: 46,\n      dep_per_unit: 19,\n    },\n    mcl: {\n      base: 1,\n      dep_per_unit: 2359,\n    },\n    mcli: {\n      base: 1,\n      dep_per_unit: 2322,\n    },\n    mcp: {\n      base: 1,\n      dep_per_unit: 1235,\n    },\n    meq: {\n      base: 1,\n      dep_per_unit: 2343,\n    },\n    retd_contract: {\n      base: 65,\n      dep_per_unit: 19,\n    },\n    smo: {\n      base: 84,\n      dep_per_unit: 13,\n    },\n    srwq: {\n      base: 54,\n      dep_per_unit: 2,\n    },\n  },\n  consensus: {\n    PoA: {\n      signing_key: '0x94ffcc53b892684acefaebc8a3d4a595e528a8cf664eeb3ef36f1020b0809d0d',\n    },\n  },\n};\n","import { spawn } from 'child_process';\n\nimport type { FuelsConfig } from '../../types';\nimport { findBinPath } from '../../utils/findBinPath';\nimport { getBinarySource } from '../../utils/getBinarySource';\nimport { debug, error, log, loggingConfig } from '../../utils/logger';\n\ntype OnResultFn = () => void;\ntype OnErrorFn = (reason?: number | Error) => void;\n\nexport const onForcExit =\n  (onResultFn: OnResultFn, onErrorFn: OnErrorFn) => (code: number | null) => {\n    if (code) {\n      onErrorFn(code);\n      // process.exit()?\n    } else {\n      onResultFn();\n    }\n  };\n\nexport const onForcError = (onError: OnErrorFn) => (err: Error) => {\n  error(err);\n  onError(err);\n};\n\nexport const buildSwayProgram = async (config: FuelsConfig, path: string) => {\n  debug('Building Sway program', path);\n\n  return new Promise<void>((resolve, reject) => {\n    const builtInForcPath = findBinPath('fuels-forc');\n\n    const command = config.useBuiltinForc ? builtInForcPath : 'forc';\n    const forc = spawn(command, ['build', '-p', path], { stdio: 'pipe' });\n\n    if (loggingConfig.isLoggingEnabled) {\n      forc.stderr?.pipe(process.stderr);\n    }\n\n    if (loggingConfig.isDebugEnabled) {\n      forc.stdout?.pipe(process.stdout);\n    }\n\n    const onExit = onForcExit(resolve, reject);\n    const onError = onForcError(reject);\n\n    forc.on('exit', onExit);\n    forc.on('error', onError);\n  });\n};\n\nexport async function buildSwayPrograms(config: FuelsConfig) {\n  log(`Building Sway programs using ${getBinarySource(config.useBuiltinFuelCore)} 'forc' binary`);\n\n  const paths = config.workspace\n    ? [config.workspace]\n    : [config.contracts, config.predicates, config.scripts].flat();\n\n  await Promise.all(paths.map((path) => buildSwayProgram(config, path)));\n}\n","import { ProgramTypeEnum } from '@fuel-ts/abi-typegen';\nimport { runTypegen } from '@fuel-ts/abi-typegen/runTypegen';\nimport { writeFileSync, mkdirSync } from 'fs';\nimport { join } from 'path';\n\nimport { getABIPaths } from '../../config/forcUtils';\nimport { renderIndexTemplate } from '../../templates';\nimport type { FuelsConfig } from '../../types';\nimport { debug, log, loggingConfig } from '../../utils/logger';\n\nasync function generateTypesForProgramType(\n  config: FuelsConfig,\n  paths: string[],\n  programType: ProgramTypeEnum\n) {\n  debug('Generating types..');\n\n  const filepaths = await getABIPaths(paths);\n  const pluralizedDirName = `${String(programType).toLocaleLowerCase()}s`;\n\n  runTypegen({\n    programType,\n    cwd: config.basePath,\n    filepaths,\n    output: join(config.output, pluralizedDirName),\n    silent: !loggingConfig.isDebugEnabled,\n  });\n\n  return pluralizedDirName;\n}\n\nexport async function generateTypes(config: FuelsConfig) {\n  log('Generating types..');\n\n  const { contracts, scripts, predicates, output } = config;\n\n  mkdirSync(output, { recursive: true });\n\n  const members = [\n    { type: ProgramTypeEnum.CONTRACT, programs: contracts },\n    { type: ProgramTypeEnum.SCRIPT, programs: scripts },\n    { type: ProgramTypeEnum.PREDICATE, programs: predicates },\n  ];\n\n  const pluralizedDirNames = await Promise.all(\n    members\n      .filter(({ programs }) => !!programs.length)\n      .map(({ programs, type }) => generateTypesForProgramType(config, programs, type))\n  );\n\n  const indexFile = await renderIndexTemplate(pluralizedDirNames);\n\n  writeFileSync(join(config.output, 'index.ts'), indexFile);\n}\n","/* eslint-disable @typescript-eslint/triple-slash-reference */\n/// <reference path=\"../../hbs.d.ts\" />\n\n// TODO: once abi-typegen implements a way to generate all types of sway\n// programs in a bundle file we don't need to create a index.ts file\nimport { compile } from 'handlebars';\n\nimport indexTemplate from './index.hbs';\n\nexport function renderIndexTemplate(paths: string[]) {\n  const renderTemplate = compile(indexTemplate, {\n    strict: true,\n    noEscape: true,\n  });\n  return renderTemplate({\n    paths,\n  });\n}\n","import { type Command } from 'commander';\n\nimport type { FuelsConfig } from '../../types';\nimport { log } from '../../utils/logger';\nimport { deploy } from '../deploy';\nimport { autoStartFuelCore } from '../dev/startFuelCore';\n\nimport { buildSwayPrograms } from './buildSwayPrograms';\nimport { generateTypes } from './generateTypes';\n\nexport async function build(config: FuelsConfig, program?: Command) {\n  log('Building..');\n\n  await buildSwayPrograms(config);\n  await generateTypes(config);\n\n  const options = program?.opts();\n\n  if (options?.deploy) {\n    const fuelCore = await autoStartFuelCore(config);\n    await deploy(config);\n    fuelCore?.killChildProcess();\n  }\n}\n","import type { FSWatcher } from 'chokidar';\nimport { watch } from 'chokidar';\nimport { globSync } from 'glob';\n\nimport { loadConfig } from '../../config/loadConfig';\nimport type { FuelsConfig } from '../../types';\nimport { error, log } from '../../utils/logger';\nimport { build } from '../build';\nimport { deploy } from '../deploy';\nimport { withConfigErrorHandler } from '../withConfig';\n\nimport type { FuelCoreNode } from './startFuelCore';\nimport { autoStartFuelCore } from './startFuelCore';\n\nexport const closeAllFileHandlers = (handlers: FSWatcher[]) => {\n  handlers.forEach((h) => h.close());\n};\n\nexport const buildAndDeploy = async (config: FuelsConfig) => {\n  await build(config);\n  return deploy(config);\n};\n\nexport const getConfigFilepathsToWatch = (config: FuelsConfig) => {\n  const configFilePathsToWatch: string[] = [config.configPath];\n  if (config.chainConfig) {\n    configFilePathsToWatch.push(config.chainConfig);\n  }\n  return configFilePathsToWatch;\n};\n\nexport type DevState = {\n  config: FuelsConfig;\n  watchHandlers: FSWatcher[];\n  fuelCore?: FuelCoreNode;\n};\n\nexport const workspaceFileChanged = (state: DevState) => async (_event: string, path: string) => {\n  log(`\\nFile changed: ${path}`);\n  await buildAndDeploy(state.config);\n};\n\nexport const configFileChanged = (state: DevState) => async (_event: string, path: string) => {\n  log(`\\nFile changed: ${path}`);\n\n  closeAllFileHandlers(state.watchHandlers);\n  state.fuelCore?.killChildProcess();\n\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    await dev(await loadConfig(state.config.basePath));\n  } catch (err: unknown) {\n    await withConfigErrorHandler(<Error>err, state.config);\n  }\n};\n\nexport const dev = async (config: FuelsConfig) => {\n  const fuelCore = await autoStartFuelCore(config);\n\n  const configFilePaths = getConfigFilepathsToWatch(config);\n\n  const { contracts, scripts, predicates, basePath: cwd } = config;\n\n  const workspaceFilePaths = [contracts, predicates, scripts]\n    .flat()\n    .flatMap((dir) => [\n      dir,\n      globSync(`${dir}/**/*.toml`, { cwd }),\n      globSync(`${dir}/**/*.sw`, { cwd }),\n    ])\n    .flat();\n\n  try {\n    // Run once\n    await buildAndDeploy(config);\n\n    const watchHandlers: FSWatcher[] = [];\n    const options = { persistent: true, ignoreInitial: true, ignored: '**/out/**' };\n    const state = { config, watchHandlers, fuelCore };\n\n    // watch: fuels.config.ts and chainConfig.json\n    watchHandlers.push(watch(configFilePaths, options).on('all', configFileChanged(state)));\n\n    // watch: Forc's workspace members\n    watchHandlers.push(watch(workspaceFilePaths, options).on('all', workspaceFileChanged(state)));\n  } catch (err: unknown) {\n    error(err);\n    throw err;\n  }\n};\n","import { FUEL_NETWORK_URL } from '@fuel-ts/wallet/configs';\nimport { bundleRequire } from 'bundle-require';\nimport type { BuildOptions } from 'esbuild';\nimport JoyCon from 'joycon';\nimport { resolve, parse } from 'path';\n\nimport { defaultConsensusKey } from '../commands/dev/defaultChainConfig';\nimport { shouldUseBuiltinForc } from '../commands/init/shouldUseBuiltinForc';\nimport { shouldUseBuiltinFuelCore } from '../commands/init/shouldUseBuiltinFuelCore';\nimport type { FuelsConfig, UserFuelsConfig } from '../types';\n\nimport { readForcToml, readSwayType } from './forcUtils';\nimport { validateConfig } from './validateConfig';\n\nexport async function loadConfig(cwd: string): Promise<FuelsConfig> {\n  const configJoycon = new JoyCon();\n\n  const configPath = await configJoycon.resolve({\n    files: ['ts', 'js', 'cjs', 'mjs'].map((e) => `fuels.config.${e}`),\n    cwd,\n    stopDir: parse(cwd).root,\n  });\n\n  if (!configPath) {\n    throw new Error('Config file not found!');\n  }\n\n  const esbuildOptions: BuildOptions = {\n    target: 'ES2021',\n    platform: 'node',\n    format: 'esm',\n  };\n\n  const result = await bundleRequire({\n    filepath: configPath,\n    esbuildOptions,\n    cwd,\n  });\n\n  const userConfig: UserFuelsConfig = result.mod.default;\n\n  await validateConfig(userConfig);\n\n  const useBuiltinForc = userConfig.useBuiltinForc ?? shouldUseBuiltinForc();\n  const useBuiltinFuelCore = userConfig.useBuiltinFuelCore ?? shouldUseBuiltinFuelCore();\n\n  // Start clone-object while initializiung optional props\n  const config: FuelsConfig = {\n    contracts: [],\n    scripts: [],\n    predicates: [],\n    deployConfig: {},\n    autoStartFuelCore: true,\n    fuelCorePort: 4000,\n    providerUrl: FUEL_NETWORK_URL,\n    privateKey: defaultConsensusKey,\n    ...userConfig,\n    basePath: cwd,\n    useBuiltinForc,\n    useBuiltinFuelCore,\n    configPath,\n  };\n\n  // Resolve the output path on loaded config\n  config.output = resolve(cwd, config.output);\n\n  // Initialize optional variables\n  config.autoStartFuelCore = userConfig.autoStartFuelCore ?? true;\n\n  if (!userConfig.workspace) {\n    // Resolve members individually\n    const { contracts, predicates, scripts } = userConfig;\n    config.contracts = (contracts || []).map((c: string) => resolve(cwd, c));\n    config.scripts = (scripts || []).map((s: string) => resolve(cwd, s));\n    config.predicates = (predicates || []).map((p: string) => resolve(cwd, p));\n  } else {\n    // Resolve members via workspace\n    const workspace = resolve(cwd, userConfig.workspace);\n    const forcToml = readForcToml(workspace);\n\n    if (!forcToml.workspace) {\n      const workspaceMsg = `Forc workspace not detected in:\\n  ${workspace}/Forc.toml`;\n\n      const swayProgramType = readSwayType(workspace);\n      const exampleMsg = `Try using '${swayProgramType}s' instead of 'workspace' in:\\n  ${configPath}`;\n\n      throw new Error([workspaceMsg, exampleMsg].join('\\n\\n'));\n    }\n\n    const swayMembers = forcToml.workspace.members.map((member) => resolve(workspace, member));\n\n    swayMembers.forEach((path) => {\n      const type = readSwayType(path);\n      config[`${type}s`].push(path);\n    });\n\n    config.workspace = workspace;\n  }\n\n  return config;\n}\n","import { getSystemForc } from '@fuel-ts/versions/cli';\n\nexport const shouldUseBuiltinForc = () => {\n  // first, tries to use system binary\n  const { systemForcVersion } = getSystemForc();\n  if (systemForcVersion !== null) {\n    return false;\n  }\n\n  // if its not found, will default to the built-in binary\n  return true;\n};\n","import { getSystemFuelCore } from '@fuel-ts/versions/cli';\n\nexport const shouldUseBuiltinFuelCore = () => {\n  // first, tries use system binary\n  const { systemFuelCoreVersion } = getSystemFuelCore();\n  if (systemFuelCoreVersion !== null) {\n    return false;\n  }\n\n  // if its not found, will default to the built-in binary\n  return true;\n};\n","import * as yup from 'yup';\n\nimport type { UserFuelsConfig } from '../types';\n\nconst schema = yup\n  .object({\n    workspace: yup.string(),\n    contracts: yup.array(yup.string()),\n    scripts: yup.array(yup.string()),\n    predicates: yup.array(yup.string()),\n    output: yup.string().required('config.output should be a valid string'),\n  })\n  .required();\n\nexport async function validateConfig(config: UserFuelsConfig) {\n  return schema.validate(config);\n}\n","import { capitalizeString } from '@fuel-ts/utils';\nimport type { Command } from 'commander';\n\nimport { loadConfig } from '../config/loadConfig';\nimport type { Commands, FuelsConfig, CommandEvent } from '../types';\nimport { error, log } from '../utils/logger';\n\nexport const withConfigErrorHandler = async (err: Error, config?: FuelsConfig) => {\n  error(err);\n  if (config) {\n    await config.onFailure?.(<Error>err, config);\n  }\n};\n\nexport function withConfig<CType extends Commands>(\n  program: Command,\n  command: CType,\n  fn: (\n    config: FuelsConfig,\n    options?: Command\n  ) => Promise<Extract<CommandEvent, { type: CType }>['data']>\n) {\n  return async () => {\n    const options = program.opts();\n\n    let config: FuelsConfig;\n\n    try {\n      config = await loadConfig(options.path);\n    } catch (err) {\n      await withConfigErrorHandler(<Error>err);\n      return;\n    }\n\n    try {\n      const eventData = await fn(config, program);\n      config.onSuccess?.(\n        {\n          type: command,\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          data: eventData as any,\n        },\n        config\n      );\n      log(`🎉  ${capitalizeString(command)} completed successfully!`);\n    } catch (err: unknown) {\n      await withConfigErrorHandler(<Error>err, config);\n    }\n  };\n}\n","import { type Command } from 'commander';\nimport { existsSync, writeFileSync } from 'fs';\nimport { globSync } from 'glob';\nimport { join, relative, resolve } from 'path';\n\nimport { renderFuelsConfigTemplate } from '../../templates/fuels.config';\nimport { log } from '../../utils/logger';\n\nexport function init(program: Command) {\n  const options = program.opts();\n\n  const { path, autoStartFuelCore, useBuiltinForc, useBuiltinFuelCore } = options;\n\n  let workspace: string | undefined;\n  let absoluteWorkspace: string | undefined;\n\n  if (options.workspace) {\n    absoluteWorkspace = resolve(path, options.workspace);\n    workspace = `./${relative(path, absoluteWorkspace)}`;\n  }\n\n  const absoluteOutput = resolve(path, options.output);\n  const output = `./${relative(path, absoluteOutput)}`;\n\n  const [contracts, scripts, predicates] = ['contracts', 'scripts', 'predicates'].map(\n    (optionName) => {\n      const pathOrGlob: string = options[optionName];\n      if (!pathOrGlob) {\n        return undefined;\n      }\n      const expanded = globSync(pathOrGlob, { cwd: path });\n      const relatives = expanded.map((e) => relative(path, e));\n      return relatives;\n    }\n  );\n\n  const noneIsInformed = ![workspace, contracts, scripts, predicates].find((v) => v !== undefined);\n\n  if (noneIsInformed) {\n    // mimicking commander property validation\n    process.stdout.write(`error: required option '-w, --workspace <path>' not specified\\r`);\n    process.exit(1);\n  }\n\n  const fuelsConfigPath = join(path, 'fuels.config.ts');\n\n  if (existsSync(fuelsConfigPath)) {\n    throw new Error(`Config file exists, aborting.\\n  ${fuelsConfigPath}`);\n  }\n\n  const renderedConfig = renderFuelsConfigTemplate({\n    workspace,\n    contracts,\n    scripts,\n    predicates,\n    output,\n    useBuiltinForc,\n    useBuiltinFuelCore,\n    autoStartFuelCore,\n  });\n\n  writeFileSync(fuelsConfigPath, renderedConfig);\n\n  log(`Config file created at:\\n\\n ${fuelsConfigPath}\\n`);\n}\n","/* eslint-disable @typescript-eslint/triple-slash-reference */\n/// <reference path=\"../../hbs.d.ts\" />\n\nimport Handlebars, { compile } from 'handlebars';\n\nimport fuelsConfigTemplate from './fuels.config.hbs';\n\nHandlebars.registerHelper('isDefined', (v) => v !== undefined);\n\nexport function renderFuelsConfigTemplate(props: {\n  workspace?: string;\n  contracts?: string[];\n  scripts?: string[];\n  predicates?: string[];\n  output: string;\n  useBuiltinForc?: boolean;\n  useBuiltinFuelCore?: boolean;\n  autoStartFuelCore?: boolean;\n}) {\n  const renderTemplate = compile(fuelsConfigTemplate, {\n    strict: true,\n    noEscape: true,\n  });\n\n  return renderTemplate(props);\n}\n","import type { Command } from 'commander';\n\nimport type { Commands } from '../types';\nimport { error } from '../utils/logger';\n\nexport function withProgram<CType extends Commands>(\n  program: Command,\n  _command: CType,\n  fn: (program: Command) => void\n) {\n  return async () => {\n    try {\n      await fn(program);\n    } catch (err) {\n      error(err);\n    }\n  };\n}\n","#!/usr/bin/env node\nimport { run } from './cli';\nimport { error } from './cli/utils/logger';\n\ntry {\n  run(process.argv).catch(process.stderr.write);\n} catch (err: unknown) {\n  error((err as Error)?.message || err);\n  process.exit(1);\n}\n"],"mappings":"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","names":["existsSync","readFileSync","readFileSync","existsSync","join","existsSync","join","chalk","join","resolve","spawn","resolve","spawn","writeFileSync","mkdirSync","join","join","mkdirSync","writeFileSync","resolve","resolve","existsSync","writeFileSync","globSync","join","resolve","compile","compile","autoStartFuelCore","resolve","globSync","join","existsSync","writeFileSync"]}